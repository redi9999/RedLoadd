<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>RedLoad - Community Platform</title>
<script src="https://cdn.tailwindcss.com"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
<!-- EmailJS Integration with correct public key -->
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/@emailjs/browser@4/dist/email.min.js"></script>
<script type="text/javascript">
    (function(){
        emailjs.init({
            publicKey: "pSZfC-vq2HJ1uxgF4",
        });
    })();
</script>
<style>
    :root {
        --bg-primary: #FFFFFF;
        --bg-secondary: #F4F4F4;
        --text-primary: #1E1E1E;
        --accent-color: #007AFF;
        --border-radius: 16px;
    }
    
    [data-theme="dark"] {
        --bg-primary: #1a1a1a;
        --bg-secondary: #2d2d2d;
        --text-primary: #FFFFFF;
        --accent-color: #0A84FF;
    }

    body {
        background-color: var(--bg-primary);
        color: var(--text-primary);
        font-family: 'San Francisco', 'Helvetica Neue', Arial, sans-serif;
        transition: background-color 0.3s, color 0.3s;
    }

    [data-theme="dark"] .bg-white {
        background-color: var(--bg-secondary);
    }

    [data-theme="dark"] .text-gray-800 {
        color: var(--text-primary);
    }

    [data-theme="dark"] .border-gray-200 {
        border-color: #404040;
    }

    .slide-sidebar {
        transform: translateX(-100%);
        transition: transform 0.3s ease-in-out;
    }

    .slide-sidebar.active {
        transform: translateX(0);
    }

    .section {
        display: none;
    }

    .section.active {
        display: block;
    }

    .download-item {
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .download-item:hover {
        transform: scale(1.02);
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

    .notification-panel {
        position: fixed;
        right: -400px;
        top: 80px;
        width: 350px;
        transition: right 0.3s ease-in-out;
        z-index: 1000;
    }

    .notification-panel.active {
        right: 20px;
    }

    /* Auth Modal Styles */
    .auth-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 2000;
        justify-content: center;
        align-items: center;
    }

    .auth-modal.active {
        display: flex;
    }

    .auth-content {
        background: var(--bg-primary);
        padding: 2rem;
        border-radius: 12px;
        width: 90%;
        max-width: 400px;
        position: relative;
    }

    /* Profile Modal Styles */
    .profile-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 2000;
        justify-content: center;
        align-items: center;
    }

    .profile-modal.active {
        display: flex;
    }

    .profile-content {
        background: var(--bg-primary);
        padding: 2rem;
        border-radius: 12px;
        width: 90%;
        max-width: 400px;
        position: relative;
        max-height: 90vh;
        overflow-y: auto;
    }

    /* Security Modal Styles */
    .security-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 2000;
        justify-content: center;
        align-items: center;
    }

    .security-modal.active {
        display: flex;
    }

    .security-content {
        background: var(--bg-primary);
        padding: 2rem;
        border-radius: 12px;
        width: 90%;
        max-width: 400px;
        position: relative;
    }

    /* Contact Modal Styles */
    .contact-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 2000;
        justify-content: center;
        align-items: center;
    }

    .contact-modal.active {
        display: flex;
    }

    .contact-content {
        background: var(--bg-primary);
        padding: 2rem;
        border-radius: 12px;
        width: 90%;
        max-width: 500px;
        position: relative;
    }

    /* Splash screen */
    #splash-screen {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: #007AFF;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }

    .logo-container {
        margin-bottom: 30px;
    }

    .logo-letter {
        display: inline-block;
        font-size: 4rem;
        font-weight: bold;
        color: white;
        opacity: 0;
        transform: translateY(20px);
    }

    .progress-bar {
        width: 200px;
        height: 4px;
        background-color: rgba(255, 255, 255, 0.2);
        border-radius: 4px;
        overflow: hidden;
    }

    .progress {
        height: 100%;
        width: 0%;
        background-color: white;
        border-radius: 4px;
    }

    /* Selection mode */
    .selection-checkbox {
        display: none;
        width: 20px;
        height: 20px;
        border-radius: 4px;
        border: 2px solid var(--accent-color);
        margin-right: 10px;
    }

    .selection-mode .selection-checkbox {
        display: flex;
    }

    .selection-checkbox.checked {
        background-color: var(--accent-color);
        position: relative;
    }

    .selection-checkbox.checked::after {
        content: "✓";
        position: absolute;
        color: white;
        font-size: 12px;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    /* Chat Styles */
    .chat-container {
        display: flex;
        flex-direction: column;
        height: calc(100vh - 200px);
        max-height: 600px;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
        display: flex;
        flex-direction: column;
    }

    .message {
        max-width: 80%;
        margin-bottom: 1rem;
        padding: 0.75rem;
        border-radius: 1rem;
        position: relative;
    }

    .message-self {
        align-self: flex-end;
        background-color: #007AFF;
        color: white;
        border-bottom-right-radius: 0.25rem;
    }

    .message-other {
        align-self: flex-start;
        background-color: #E5E5EA;
        color: black;
        border-bottom-left-radius: 0.25rem;
    }

    .message-admin {
        align-self: flex-start;
        background-color: #E5E5EA;
        color: black;
        border-bottom-left-radius: 0.25rem;
    }

    .message-admin .message-sender {
        color: #FF0000;
        font-weight: bold;
    }

    .message-content {
        word-break: break-word;
    }

    .message-time {
        font-size: 0.7rem;
        opacity: 0.7;
        margin-top: 0.25rem;
        text-align: right;
    }

    .message-sender {
        font-size: 0.8rem;
        font-weight: 500;
        margin-bottom: 0.25rem;
    }

    .chat-input {
        display: flex;
        padding: 1rem;
        background-color: var(--bg-secondary);
        border-top: 1px solid rgba(0,0,0,0.1);
        position: relative;
    }

    .chat-input textarea {
        flex: 1;
        padding: 0.75rem;
        border-radius: 1.5rem;
        border: 1px solid rgba(0,0,0,0.1);
        resize: none;
        max-height: 100px;
        outline: none;
    }

    .chat-input button {
        margin-left: 0.5rem;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .attachment-preview {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-top: 0.5rem;
    }

    .attachment-item {
        position: relative;
        width: 60px;
        height: 60px;
        border-radius: 0.5rem;
        overflow: hidden;
        background-color: rgba(0,0,0,0.1);
    }

    .attachment-item img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .attachment-item video {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .attachment-item .remove-attachment {
        position: absolute;
        top: 2px;
        right: 2px;
        background-color: rgba(0,0,0,0.5);
        color: white;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.7rem;
        cursor: pointer;
    }

    .message-media {
        margin-top: 0.5rem;
        max-width: 200px;
        border-radius: 0.5rem;
        overflow: hidden;
    }

    .message-media img {
        width: 100%;
        cursor: pointer;
    }

    .message-media video {
        width: 100%;
        cursor: pointer;
    }

    .message-media audio {
        width: 100%;
    }

    .media-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.9);
        z-index: 3000;
        justify-content: center;
        align-items: center;
    }

    .media-modal.active {
        display: flex;
    }

    .media-modal-content {
        max-width: 90%;
        max-height: 90%;
    }

    .media-modal-content img,
    .media-modal-content video {
        max-width: 100%;
        max-height: 90vh;
    }

    .close-media-modal {
        position: absolute;
        top: 20px;
        right: 20px;
        color: white;
        font-size: 2rem;
        cursor: pointer;
    }

    .chat-actions {
        display: flex;
        gap: 0.5rem;
        margin-bottom: 0.5rem;
    }

    .chat-action-btn {
        background-color: transparent;
        border: none;
        color: #007AFF;
        cursor: pointer;
        font-size: 1.2rem;
        padding: 0.25rem;
        border-radius: 50%;
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .chat-action-btn:hover {
        background-color: rgba(0,0,0,0.05);
    }

    /* Email verification banner */
    .verification-banner {
        background-color: #FEF3C7;
        color: #92400E;
        padding: 0.75rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    /* Profile tabs */
    .profile-tabs {
        display: flex;
        border-bottom: 1px solid rgba(0,0,0,0.1);
        margin-bottom: 1rem;
        overflow-x: auto;
        position: sticky;
        top: 0;
        background-color: var(--bg-primary);
        z-index: 10;
    }

    .profile-tab {
        padding: 0.75rem 1rem;
        cursor: pointer;
        border-bottom: 2px solid transparent;
        white-space: nowrap;
    }

    .profile-tab.active {
        border-bottom-color: var(--accent-color);
        color: var(--accent-color);
        font-weight: 500;
    }

    .profile-section {
        display: none;
        overflow-y: visible;
        height: auto;
    }

    .profile-section.active {
        display: block;
    }

    /* Typing indicator */
    .typing-indicator {
        display: flex;
        align-items: center;
        padding: 0.5rem;
        margin-bottom: 1rem;
    }

    .typing-indicator span {
        height: 8px;
        width: 8px;
        background-color: #999;
        border-radius: 50%;
        display: inline-block;
        margin-right: 3px;
        animation: typing 1s infinite;
    }

    .typing-indicator span:nth-child(2) {
        animation-delay: 0.2s;
    }

    .typing-indicator span:nth-child(3) {
        animation-delay: 0.4s;
    }

    @keyframes typing {
        0% { transform: translateY(0); }
        50% { transform: translateY(-5px); }
        100% { transform: translateY(0); }
    }

    /* Online indicator */
    .online-indicator {
        width: 10px;
        height: 10px;
        background-color: #4CAF50;
        border-radius: 50%;
        display: inline-block;
        margin-right: 5px;
    }

    /* User list in chat */
    .chat-users {
        position: absolute;
        top: 0;
        right: 0;
        width: 200px;
        background-color: var(--bg-primary);
        border-left: 1px solid rgba(0,0,0,0.1);
        height: 100%;
        padding: 1rem;
        transform: translateX(100%);
        transition: transform 0.3s ease;
    }

    .chat-users.active {
        transform: translateX(0);
    }

    .user-item {
        display: flex;
        align-items: center;
        padding: 0.5rem;
        border-radius: 0.5rem;
    }

    .user-item:hover {
        background-color: rgba(0,0,0,0.05);
    }

    .user-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        margin-right: 0.5rem;
        object-fit: cover;
    }

    /* Login prompt */
    .login-prompt {
        background-color: rgba(0,0,0,0.05);
        padding: 1rem;
        border-radius: 0.5rem;
        text-align: center;
        margin-bottom: 1rem;
    }

    /* Message reactions */
    .message-reactions {
        display: flex;
        flex-wrap: wrap;
        gap: 0.25rem;
        margin-top: 0.5rem;
    }

    .reaction {
        background-color: rgba(0,0,0,0.1);
        border-radius: 1rem;
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
        display: flex;
        align-items: center;
        cursor: pointer;
    }

    .reaction-count {
        margin-left: 0.25rem;
        font-size: 0.7rem;
    }

    .reaction-menu {
        position: absolute;
        bottom: 100%;
        left: 0;
        background-color: white;
        border-radius: 1rem;
        padding: 0.5rem;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        display: none;
    }

    .reaction-menu.active {
        display: flex;
    }

    .reaction-btn {
        font-size: 1.2rem;
        padding: 0.25rem;
        cursor: pointer;
    }

    /* Advanced settings */
    .advanced-settings {
        margin-top: 1rem;
        padding-top: 1rem;
        border-top: 1px solid rgba(0,0,0,0.1);
    }

    .settings-group {
        margin-bottom: 1rem;
    }

    .settings-group-title {
        font-weight: 500;
        margin-bottom: 0.5rem;
    }

    /* Animation Keyframes */
    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
    
    @keyframes slideUp {
        from { transform: translateY(20px); }
        to { transform: translateY(0); }
    }
    
    @keyframes progress {
        from { width: 0%; }
        to { width: 100%; }
    }

    /* Chat filter options */
    .chat-filter {
        display: flex;
        gap: 0.5rem;
        margin-bottom: 0.5rem;
        padding: 0.5rem;
        border-bottom: 1px solid rgba(0,0,0,0.1);
    }

    .filter-option {
        padding: 0.25rem 0.5rem;
        border-radius: 1rem;
        font-size: 0.8rem;
        cursor: pointer;
        background-color: rgba(0,0,0,0.05);
    }

    .filter-option.active {
        background-color: var(--accent-color);
        color: white;
    }

    /* Message options */
    .message-options {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
        opacity: 0;
        transition: opacity 0.2s;
    }

    .message:hover .message-options {
        opacity: 1;
    }

    .message-option-btn {
        background: none;
        border: none;
        color: inherit;
        opacity: 0.5;
        cursor: pointer;
        font-size: 0.8rem;
    }

    .message-option-btn:hover {
        opacity: 1;
    }

    /* Upload progress */
    .upload-progress {
        width: 100%;
        height: 4px;
        background-color: rgba(0,0,0,0.1);
        border-radius: 2px;
        margin-top: 0.5rem;
        overflow: hidden;
        display: none;
    }

    .upload-progress-bar {
        height: 100%;
        background-color: var(--accent-color);
        width: 0%;
        transition: width 0.3s;
    }

    /* Chat settings */
    .chat-settings-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 2000;
        justify-content: center;
        align-items: center;
    }

    .chat-settings-modal.active {
        display: flex;
    }

    .chat-settings-content {
        background: var(--bg-primary);
        padding: 2rem;
        border-radius: 12px;
        width: 90%;
        max-width: 400px;
        position: relative;
    }

    /* Admin moderation panel */
    .admin-panel {
        background-color: #f8f8f8;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
    }

    .admin-panel h3 {
        font-weight: bold;
        color: #FF0000;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
    }

    .admin-panel h3 i {
        margin-right: 0.5rem;
    }

    .user-list {
        max-height: 200px;
        overflow-y: auto;
    }

    .user-list-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem;
        border-bottom: 1px solid #eee;
    }

    .user-list-item:last-child {
        border-bottom: none;
    }

    .user-info {
        display: flex;
        align-items: center;
    }

    .block-actions {
        display: flex;
        gap: 0.25rem;
    }

    .block-btn {
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.75rem;
        cursor: pointer;
    }

    .blocked-badge {
        background-color: #FF0000;
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.75rem;
        margin-left: 0.5rem;
    }

    /* Blocked message notification */
    .blocked-message {
        background-color: #FEE2E2;
        color: #B91C1C;
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
        text-align: center;
    }

    .blocked-reason {
        font-size: 0.875rem;
        margin-top: 0.5rem;
    }

    /* Contact form styles */
    .contact-form {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .contact-alert {
        background-color: #FEF3C7;
        color: #92400E;
        padding: 0.75rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
        text-align: center;
        font-weight: 500;
    }

    .contact-success {
        background-color: #ECFDF5;
        color: #065F46;
        padding: 0.75rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
        text-align: center;
        display: none;
    }

    .contact-section {
        padding: 2rem;
        background-color: var(--bg-primary);
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 2rem;
    }
</style>
</head>
<body>
<!-- Splash Screen -->
<div id="splash-screen">
    <div class="logo-container">
        <span class="logo-letter" style="animation: fadeIn 0.5s ease 0s forwards, slideUp 0.5s ease 0s forwards;">R</span>
        <span class="logo-letter" style="animation: fadeIn 0.5s ease 0.2s forwards, slideUp 0.5s ease 0.2s forwards;">e</span>
        <span class="logo-letter" style="animation: fadeIn 0.5s ease 0.4s forwards, slideUp 0.5s ease 0.4s forwards;">d</span>
        <span class="logo-letter" style="animation: fadeIn 0.5s ease 0.6s forwards, slideUp 0.5s ease 0.6s forwards;">L</span>
        <span class="logo-letter" style="animation: fadeIn 0.5s ease 0.8s forwards, slideUp 0.5s ease 0.8s forwards;">o</span>
        <span class="logo-letter" style="animation: fadeIn 0.5s ease 1.0s forwards, slideUp 0.5s ease 1.0s forwards;">a</span>
        <span class="logo-letter" style="animation: fadeIn 0.5s ease 1.2s forwards, slideUp 0.5s ease 1.2s forwards;">d</span>
    </div>
    <div class="progress-bar">
        <div class="progress" style="animation: progress 2s ease-in-out forwards;"></div>
    </div>
</div>

<!-- Auth Modal -->
<div id="auth-modal" class="auth-modal">
    <div class="auth-content shadow-lg">
        <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold text-gray-800">Account</h2>
            <button id="close-auth" class="text-gray-500 hover:text-gray-700">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <div id="auth-error" class="hidden bg-red-100 text-red-700 p-3 rounded mb-4"></div>

        <form id="auth-form" class="space-y-4">
            <input type="email" id="auth-email" placeholder="Email" 
                class="w-full bg-gray-100 text-gray-800 p-3 rounded-lg border border-gray-200">
            
            <input type="password" id="auth-password" placeholder="Password" 
                class="w-full bg-gray-100 text-gray-800 p-3 rounded-lg border border-gray-200">
            
            <button type="submit" id="auth-submit" 
                class="w-full bg-blue-500 text-white p-3 rounded-lg hover:bg-blue-600 transition">
                Sign In
            </button>

            <p id="auth-switch" class="text-center text-blue-500 hover:text-blue-600 cursor-pointer">
                Don't have an account? Sign Up
            </p>

            <div class="relative my-6">
                <div class="absolute inset-0 flex items-center">
                    <div class="w-full border-t border-gray-300"></div>
                </div>
                <div class="relative flex justify-center text-sm">
                    <span class="px-2 bg-white text-gray-500">or</span>
                </div>
            </div>

            <button type="button" id="google-auth" 
                class="w-full border border-gray-300 p-3 rounded-lg hover:bg-gray-50 transition flex items-center justify-center">
                <img src="https://www.google.com/images/branding/googleg/1x/googleg_standard_color_128dp.png" 
                    alt="Google" class="w-5 h-5 mr-2">
                Continue with Google
            </button>
        </form>
    </div>
</div>

<!-- Profile Modal -->
<div id="profile-modal" class="profile-modal">
    <div class="profile-content shadow-lg">
        <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold text-gray-800">Profile</h2>
            <button id="close-profile" class="text-gray-500 hover:text-gray-700">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <div id="verification-banner" class="verification-banner hidden">
            <div class="flex items-center">
                <i class="fas fa-exclamation-triangle mr-2"></i>
                <span>Please verify your email address</span>
            </div>
            <button id="send-verification" class="text-blue-700 hover:text-blue-800 font-medium">
                Send verification
            </button>
        </div>

        <div class="flex flex-col items-center mb-6">
            <div class="relative">
                <img id="profile-image" src="https://via.placeholder.com/150" alt="Profile" 
                    class="w-24 h-24 rounded-full object-cover border-2 border-blue-500
                    class="w-24 h-24 rounded-full object-cover border-2 border-blue-500">
                <button id="change-photo" class="absolute bottom-0 right-0 bg-blue-500 text-white rounded-full p-2 shadow-lg">
                    <i class="fas fa-camera"></i>
                </button>
                <input type="file" id="photo-upload" accept="image/*" class="hidden">
            </div>
            <h3 id="profile-name" class="text-xl font-semibold mt-4">User</h3>
            <p id="profile-email" class="text-gray-500">user@example.com</p>
        </div>

        <div class="profile-tabs">
            <div class="profile-tab active" data-tab="personal">Personal Info</div>
            <div class="profile-tab" data-tab="social">Social Media</div>
            <div class="profile-tab" data-tab="security">Security</div>
            <div class="profile-tab" data-tab="preferences">Preferences</div>
        </div>

        <div id="personal-section" class="profile-section active">
            <div class="mb-4">
                <label for="display-name" class="block text-gray-700 mb-2">Display Name</label>
                <input type="text" id="display-name" placeholder="Your name" 
                    class="w-full bg-gray-100 text-gray-800 p-3 rounded-lg border border-gray-200">
            </div>

            <div class="mb-4">
                <label for="bio" class="block text-gray-700 mb-2">Bio</label>
                <textarea id="bio" placeholder="Tell us about yourself" rows="3"
                    class="w-full bg-gray-100 text-gray-800 p-3 rounded-lg border border-gray-200"></textarea>
            </div>

            <div class="mb-4">
                <label for="location" class="block text-gray-700 mb-2">Location</label>
                <input type="text" id="location" placeholder="Your location" 
                    class="w-full bg-gray-100 text-gray-800 p-3 rounded-lg border border-gray-200">
            </div>

            <div class="mb-4">
                <label for="website" class="block text-gray-700 mb-2">Website</label>
                <input type="text" id="website" placeholder="https://yourwebsite.com" 
                    class="w-full bg-gray-100 text-gray-800 p-3 rounded-lg border border-gray-200">
            </div>
        </div>

        <div id="social-section" class="profile-section">
            <div class="mb-4">
                <label for="social-platform" class="block text-gray-700 mb-2">Social Platform</label>
                <select id="social-platform" class="w-full bg-gray-100 text-gray-800 p-3 rounded-lg border border-gray-200">
                    <option value="">Select Platform</option>
                    <option value="tiktok">TikTok</option>
                    <option value="instagram">Instagram</option>
                    <option value="facebook">Facebook</option>
                    <option value="youtube">YouTube</option>
                    <option value="twitch">Twitch</option>
                </select>
            </div>

            <div class="mb-4">
                <label for="social-username" class="block text-gray-700 mb-2">Username</label>
                <input type="text" id="social-username" placeholder="Your username" 
                    class="w-full bg-gray-100 text-gray-800 p-3 rounded-lg border border-gray-200">
            </div>

            <div class="mb-4">
                <label for="social-link" class="block text-gray-700 mb-2">Profile Link</label>
                <input type="text" id="social-link" placeholder="https://" 
                    class="w-full bg-gray-100 text-gray-800 p-3 rounded-lg border border-gray-200">
            </div>

            <div class="mb-4">
                <button id="add-social-btn" class="w-full bg-gray-200 text-gray-800 p-2 rounded-lg hover:bg-gray-300 transition flex items-center justify-center">
                    <i class="fas fa-plus mr-2"></i> Add Another Platform
                </button>
            </div>

            <div id="social-accounts" class="space-y-2">
                <!-- Social accounts will be listed here -->
            </div>
        </div>

        <div id="security-section" class="profile-section">
            <div class="mb-4">
                <p class="text-gray-700 mb-2">Password Management</p>
                <button id="change-password-btn" class="w-full bg-gray-200 text-gray-800 p-3 rounded-lg hover:bg-gray-300 transition flex items-center justify-center">
                    <i class="fas fa-lock mr-2"></i> Change Password
                </button>
            </div>

            <div class="mb-4">
                <p class="text-gray-700 mb-2">Account Security</p>
                <div class="flex items-center justify-between p-3 bg-gray-100 rounded-lg">
                    <span>Two-factor authentication</span>
                    <label class="inline-flex items-center cursor-pointer">
                        <div class="relative">
                            <input id="two-factor-toggle" type="checkbox" class="sr-only peer">
                            <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500"></div>
                        </div>
                    </label>
                </div>
            </div>

            <div class="mb-4">
                <p class="text-gray-700 mb-2">Login History</p>
                <div class="p-3 bg-gray-100 rounded-lg mb-2">
                    <div class="flex justify-between items-center">
                        <div>
                            <p class="font-medium">Current Device</p>
                            <p class="text-sm text-gray-500">Chrome on Windows</p>
                        </div>
                        <span class="text-green-500 text-sm">Active</span>
                    </div>
                </div>
                <div class="p-3 bg-gray-100 rounded-lg mb-2">
                    <div class="flex justify-between items-center">
                        <div>
                            <p class="font-medium">Previous Login</p>
                            <p class="text-sm text-gray-500">Firefox on Mac</p>
                        </div>
                        <span class="text-gray-500 text-sm">2 days ago</span>
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <button id="logout-all-devices" class="w-full bg-red-100 text-red-700 p-2 rounded-lg hover:bg-red-200 transition">
                    Logout from all devices
                </button>
            </div>
        </div>

        <div id="preferences-section" class="profile-section">
            <div class="mb-4">
                <p class="text-gray-700 mb-2">Notification Preferences</p>
                <div class="space-y-2">
                    <div class="flex items-center justify-between">
                        <span>Email notifications</span>
                        <label class="inline-flex items-center cursor-pointer">
                            <div class="relative">
                                <input id="email-notif-toggle" type="checkbox" class="sr-only peer" checked>
                                <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500"></div>
                            </div>
                        </label>
                    </div>
                    <div class="flex items-center justify-between">
                        <span>Chat notifications</span>
                        <label class="inline-flex items-center cursor-pointer">
                            <div class="relative">
                                <input id="chat-notif-toggle" type="checkbox" class="sr-only peer" checked>
                                <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500"></div>
                            </div>
                        </label>
                    </div>
                    <div class="flex items-center justify-between">
                        <span>Download notifications</span>
                        <label class="inline-flex items-center cursor-pointer">
                            <div class="relative">
                                <input id="download-notif-toggle" type="checkbox" class="sr-only peer" checked>
                                <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500"></div>
                            </div>
                        </label>
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <p class="text-gray-700 mb-2">Privacy Settings</p>
                <div class="space-y-2">
                    <div class="flex items-center justify-between">
                        <span>Show online status</span>
                        <label class="inline-flex items-center cursor-pointer">
                            <div class="relative">
                                <input id="online-status-toggle" type="checkbox" class="sr-only peer" checked>
                                <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500"></div>
                            </div>
                        </label>
                    </div>
                    <div class="flex items-center justify-between">
                        <span>Show read receipts</span>
                        <label class="inline-flex items-center cursor-pointer">
                            <div class="relative">
                                <input id="read-receipts-toggle" type="checkbox" class="sr-only peer" checked>
                                <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500"></div>
                            </div>
                        </label>
                    </div>
                </div>
            </div>
        </div>

        <div class="flex space-x-3 mt-6">
            <button id="save-profile" class="flex-1 bg-blue-500 text-white p-3 rounded-lg hover:bg-blue-600 transition">
                Save Changes
            </button>
            <button id="logout-btn" class="flex-1 bg-gray-200 text-gray-800 p-3 rounded-lg hover:bg-gray-300 transition">
                Logout
            </button>
        </div>
    </div>
</div>

<!-- Security Modal (Change Password) -->
<div id="security-modal" class="security-modal">
    <div class="security-content shadow-lg">
        <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold text-gray-800">Change Password</h2>
            <button id="close-security" class="text-gray-500 hover:text-gray-700">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <div id="security-error" class="hidden bg-red-100 text-red-700 p-3 rounded mb-4"></div>

        <form id="security-form" class="space-y-4">
            <div>
                <label for="current-password" class="block text-gray-700 mb-2">Current Password</label>
                <input type="password" id="current-password" placeholder="Enter current password" 
                    class="w-full bg-gray-100 text-gray-800 p-3 rounded-lg border border-gray-200">
            </div>

            <div>
                <label for="new-password" class="block text-gray-700 mb-2">New Password</label>
                <input type="password" id="new-password" placeholder="Enter new password" 
                    class="w-full bg-gray-100 text-gray-800 p-3 rounded-lg border border-gray-200">
                <div class="mt-1 text-sm text-gray-500">
                    Password must be at least 8 characters and include a number and special character
                </div>
            </div>

            <div>
                <label for="confirm-password" class="block text-gray-700 mb-2">Confirm New Password</label>
                <input type="password" id="confirm-password" placeholder="Confirm new password" 
                    class="w-full bg-gray-100 text-gray-800 p-3 rounded-lg border border-gray-200">
            </div>

            <div class="password-strength mt-2">
                <div class="text-sm text-gray-700 mb-1">Password strength:</div>
                <div class="flex space-x-1">
                    <div class="h-2 w-1/4 bg-gray-200 rounded" id="strength-1"></div>
                    <div class="h-2 w-1/4 bg-gray-200 rounded" id="strength-2"></div>
                    <div class="h-2 w-1/4 bg-gray-200 rounded" id="strength-3"></div>
                    <div class="h-2 w-1/4 bg-gray-200 rounded" id="strength-4"></div>
                </div>
                <div class="text-xs text-gray-500 mt-1" id="strength-text">Enter a password</div>
            </div>

            <button type="submit" id="update-password-btn" 
                class="w-full bg-blue-500 text-white p-3 rounded-lg hover:bg-blue-600 transition">
                Update Password
            </button>
        </form>
    </div>
</div>

<!-- Contact Modal -->
<div id="contact-modal" class="contact-modal">
    <div class="contact-content shadow-lg">
        <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold text-gray-800">Contact Us</h2>
            <button id="close-contact" class="text-gray-500 hover:text-gray-700">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <div class="contact-alert">
            <p>Please use your real email address or you won't receive a response!</p>
        </div>

        <div id="contact-success" class="contact-success">
            <p>Thank you for your message! We'll get back to you shortly.</p>
        </div>

        <form id="contact-form" class="space-y-4">
            <div>
                <label for="contact-name" class="block text-gray-700 mb-2">Your Name</label>
                <input type="text" id="contact-name" name="from_name" placeholder="Enter your name" 
                    class="w-full bg-gray-100 text-gray-800 p-3 rounded-lg border border-gray-200" required>
            </div>

            <div>
                <label for="contact-email" class="block text-gray-700 mb-2">Your Email</label>
                <input type="email" id="contact-email" name="reply_to" placeholder="Enter your email" 
                    class="w-full bg-gray-100 text-gray-800 p-3 rounded-lg border border-gray-200" required>
            </div>

            <div>
                <label for="contact-subject" class="block text-gray-700 mb-2">Subject</label>
                <input type="text" id="contact-subject" name="subject" placeholder="Enter subject" 
                    class="w-full bg-gray-100 text-gray-800 p-3 rounded-lg border border-gray-200" required>
            </div>

            <div>
                <label for="contact-message" class="block text-gray-700 mb-2">Message</label>
                <textarea id="contact-message" name="message" placeholder="Enter your message" rows="5"
                    class="w-full bg-gray-100 text-gray-800 p-3 rounded-lg border border-gray-200" required></textarea>
            </div>

            <button type="submit" id="send-contact" 
                class="w-full bg-blue-500 text-white p-3 rounded-lg hover:bg-blue-600 transition">
                Send Message
            </button>
        </form>
    </div>
</div>

<!-- Chat Settings Modal -->
<div id="chat-settings-modal" class="chat-settings-modal">
    <div class="chat-settings-content shadow-lg">
        <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold text-gray-800">Chat Settings</h2>
            <button id="close-chat-settings" class="text-gray-500 hover:text-gray-700">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <div class="space-y-4">
            <div>
                <label class="block text-gray-700 mb-2">Chat Theme</label>
                <div class="grid grid-cols-4 gap-2">
                    <div class="chat-theme-option bg-blue-500 h-10 rounded-lg cursor-pointer" data-theme="blue"></div>
                    <div class="chat-theme-option bg-green-500 h-10 rounded-lg cursor-pointer" data-theme="green"></div>
                    <div class="chat-theme-option bg-purple-500 h-10 rounded-lg cursor-pointer" data-theme="purple"></div>
                    <div class="chat-theme-option bg-red-500 h-10 rounded-lg cursor-pointer" data-theme="red"></div>
                </div>
            </div>

            <div>
                <label class="block text-gray-700 mb-2">Font Size</label>
                <select id="chat-font-size" class="w-full bg-gray-100 text-gray-800 p-2 rounded-lg border border-gray-200">
                    <option value="small">Small</option>
                    <option value="medium" selected>Medium</option>
                    <option value="large">Large</option>
                </select>
            </div>

            <div>
                <label class="block text-gray-700 mb-2">Message Display</label>
                <select id="chat-message-display" class="w-full bg-gray-100 text-gray-800 p-2 rounded-lg border border-gray-200">
                    <option value="bubbles" selected>Bubbles</option>
                    <option value="compact">Compact</option>
                    <option value="modern">Modern</option>
                </select>
            </div>

            <div>
                <label class="block text-gray-700 mb-2">Notifications</label>
                <div class="space-y-2">
                    <div class="flex items-center justify-between">
                        <span>Sound</span>
                        <label class="inline-flex items-center cursor-pointer">
                            <div class="relative">
                                <input id="chat-sound-toggle" type="checkbox" class="sr-only peer" checked>
                                <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500"></div>
                            </div>
                        </label>
                    </div>
                    <div class="flex items-center justify-between">
                        <span>Desktop notifications</span>
                        <label class="inline-flex items-center cursor-pointer">
                            <div class="relative">
                                <input id="chat-desktop-notif-toggle" type="checkbox" class="sr-only peer" checked>
                                <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500"></div>
                            </div>
                        </label>
                    </div>
                </div>
            </div>

            <div>
                <label class="block text-gray-700 mb-2">Privacy</label>
                <div class="space-y-2">
                    <div class="flex items-center justify-between">
                        <span>Show when I'm typing</span>
                        <label class="inline-flex items-center cursor-pointer">
                            <div class="relative">
                                <input id="chat-typing-toggle" type="checkbox" class="sr-only peer" checked>
                                <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500"></div>
                            </div>
                        </label>
                    </div>
                </div>
            </div>

            <button id="save-chat-settings" class="w-full bg-blue-500 text-white p-3 rounded-lg hover:bg-blue-600 transition">
                Save Settings
            </button>
        </div>
    </div>
</div>

<!-- Media Modal -->
<div id="media-modal" class="media-modal">
    <div class="media-modal-content">
        <!-- Media content will be inserted here -->
    </div>
    <div class="close-media-modal">
        <i class="fas fa-times"></i>
    </div>
</div>

<!-- Sidebar -->
<div id="sidebar" class="fixed left-0 top-0 bottom-0 w-64 bg-white shadow-xl z-50 slide-sidebar p-6">
    <div class="flex flex-col space-y-6">
        <button id="close-sidebar" class="self-end text-gray-600 text-2xl">
            <i class="fas fa-times"></i>
        </button>
        <div class="space-y-4">
            <button id="home-option" class="sidebar-option w-full text-left p-3 hover:bg-gray-100 rounded-lg flex items-center">
                <i class="fas fa-home mr-3 text-blue-500"></i> Home
            </button>
            <button id="chat-option" class="sidebar-option w-full text-left p-3 hover:bg-gray-100 rounded-lg flex items-center">
                <i class="fas fa-comments mr-3 text-green-500"></i> Chat
            </button>
            <button id="library-option" class="sidebar-option w-full text-left p-3 hover:bg-gray-100 rounded-lg flex items-center">
                <i class="fas fa-archive mr-3 text-purple-500"></i> Library
            </button>
            <button id="contact-option" class="sidebar-option w-full text-left p-3 hover:bg-gray-100 rounded-lg flex items-center">
                <i class="fas fa-envelope mr-3 text-orange-500"></i> Contact
            </button>
            <button id="settings-option" class="sidebar-option w-full text-left p-3 hover:bg-gray-100 rounded-lg flex items-center">
                <i class="fas fa-cog mr-3 text-gray-500"></i> Settings
            </button>
        </div>
    </div>
</div>

<!-- Notification Panel -->
<div id="notification-panel" class="notification-panel">
    <div class="bg-white shadow-lg rounded-lg p-4 border border-gray-200">
        <div class="flex justify-between items-center mb-3">
            <h3 class="font-bold text-gray-800">Notifications</h3>
            <button id="close-notifications" class="text-gray-500 hover:text-gray-700">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div id="notifications-container" class="space-y-2 max-h-96 overflow-y-auto">
            <!-- Notifications will be added here -->
        </div>
    </div>
</div>

<!-- Main Container -->
<div class="container mx-auto max-w-md min-h-screen relative">
    <!-- Header -->
    <header class="p-6 flex justify-between items-center">
        <div class="flex items-center">
            <i class="fas fa-cloud-download-alt text-blue-500 mr-3 text-3xl"></i>
            <h1 class="text-3xl font-bold text-gray-800">RedLoad</h1>
        </div>
        <div class="flex space-x-4">
            <button id="notifications-btn" class="relative text-gray-600 hover:text-blue-500 transition">
                <i class="fas fa-bell text-2xl"></i>
                <span id="notification-badge" class="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">0</span>
            </button>
            <button id="profile-btn" class="text-gray-600 hover:text-blue-500 transition">
                <i class="fas fa-user-circle text-2xl"></i>
            </button>
            <button id="toggle-sidebar" class="text-gray-600 text-2xl">
                <i class="fas fa-bars"></i>
            </button>
        </div>
    </header>

    <!-- Main Sections -->
    <main class="p-6">
        <!-- Home/Download Section -->
        <section id="home-section" class="section active">
            <div class="bg-white border border-gray-200 rounded-2xl p-6 shadow-sm">
                <select 
                    id="platform-select" 
                    class="w-full bg-gray-100 text-gray-800 p-3 rounded-lg mb-4 border border-gray-200"
                >
                    <option value="">Select Platform</option>
                    <option value="tiktok">TikTok</option>
                    <option value="youtube">YouTube</option>
                    <option value="instagram">Instagram</option>
                    <option value="facebook">Facebook</option>
                </select>

                <input 
                    id="video-url-input" 
                    type="text" 
                    placeholder="Paste video/audio link" 
                    class="w-full bg-gray-100 text-gray-800 p-3 rounded-lg mb-4 border border-gray-200"
                >

                <button 
                    id="download-btn" 
                    class="w-full bg-blue-500 text-white p-3 rounded-lg hover:bg-blue-600 transition"
                >
                    Download Content
                </button>

                <div id="error-message" class="text-red-500 text-center mt-3 hidden"></div>

                <!-- Platform Quick Access -->
                <div class="grid grid-cols-4 gap-4 mt-6">
                    <button id="tiktok-btn" class="platform-btn bg-gray-100 p-4 rounded-xl flex justify-center items-center hover:bg-gray-200 transition">
                        <i class="fab fa-tiktok text-3xl text-black"></i>
                    </button>
                    <button id="youtube-btn" class="platform-btn bg-gray-100 p-4 rounded-xl flex justify-center items-center hover:bg-gray-200 transition">
                        <i class="fab fa-youtube text-3xl text-red-500"></i>
                    </button>
                    <button id="instagram-btn" class="platform-btn bg-gray-100 p-4 rounded-xl flex justify-center items-center hover:bg-gray-200 transition">
                        <i class="fab fa-instagram text-3xl text-pink-500"></i>
                    </button>
                    <button id="facebook-btn" class="platform-btn bg-gray-100 p-4 rounded-xl flex justify-center items-center hover:bg-gray-200 transition">
                        <i class="fab fa-facebook text-3xl text-blue-500"></i>
                    </button>
                </div>
            </div>

            <!-- Download History Actions -->
            <div class="mt-6 flex justify-between items-center">
                <h2 class="text-xl font-bold text-gray-800">Recent Downloads</h2>
                <div class="flex space-x-2">
                    <button id="select-downloads" class="text-blue-500 hover:text-blue-600 transition">
                        <i class="fas fa-check-square mr-1"></i> Select
                    </button>
                    <button id="clear-downloads" class="text-red-500 hover:text-red-600 transition">
                        <i class="fas fa-trash-alt mr-1"></i> Clear All
                    </button>
                </div>
            </div>

            <!-- Selection Actions (Hidden by Default) -->
            <div id="selection-actions" class="mt-2 flex justify-end space-x-2 hidden">
                <button id="cancel-selection" class="text-gray-500 hover:text-gray-600 transition">
                    Cancel
                </button>
                <button id="delete-selected" class="text-red-500 hover:text-red-600 transition">
                    <i class="fas fa-trash-alt mr-1"></i> Delete Selected
                </button>
            </div>

            <!-- Download History -->
            <div id="download-list" class="mt-2 space-y-4">
                <!-- Downloads will be added here -->
            </div>
        </section>

        <!-- Chat Section -->
        <section id="chat-section" class="section">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-3xl text-gray-800">Community Chat</h2>
                <div class="flex items-center">
                    <span id="online-users-count" class="text-sm text-gray-500 mr-2">0 online</span>
                    <button id="chat-settings-btn" class="text-gray-500 hover:text-gray-600 mr-2">
                        <i class="fas fa-cog"></i>
                    </button>
                    <button id="toggle-users-list" class="text-blue-500 hover:text-blue-600">
                        <i class="fas fa-users"></i>
                    </button>
                </div>
            </div>
            
            <div class="bg-white border border-gray-200 rounded-2xl shadow-sm overflow-hidden relative">
                <!-- Admin Panel (Only visible to admin) -->
                <div id="admin-panel" class="admin-panel hidden">
                    <h3><i class="fas fa-shield-alt"></i> Admin Controls</h3>
                    <p class="text-sm mb-2">You can moderate users by blocking them for different durations.</p>
                    <div id="user-list" class="user-list">
                        <!-- User list will be populated here -->
                    </div>
                </div>
                
                <div class="chat-filter px-4 py-2">
                    <div class="flex space-x-2">
                        <div class="filter-option active" data-filter="all">All</div>
                        <div class="filter-option" data-filter="media">Media</div>
                        <div class="filter-option" data-filter="links">Links</div>
                        <div class="filter-option" data-filter="mentions">Mentions</div>
                    </div>
                </div>
                
                <div class="chat-container">
                    <div id="chat-messages" class="chat-messages">
                        <!-- Messages will be loaded here -->
                        <div class="flex justify-center my-4">
                            <p class="text-gray-500 text-sm">Welcome to the community chat!</p>
                        </div>
                    </div>
                    <div id="typing-indicator" class="typing-indicator hidden ml-4">
                        <span></span>
                        <span></span>
                        <span></span>
                        <p class="text-sm text-gray-500 ml-2">Someone is typing...</p>
                    </div>
                    
                    <!-- Login prompt for non-logged in users -->
                    <div id="login-prompt" class="login-prompt hidden">
                        <p class="mb-2">Please log in to participate in the chat</p>
                        <button id="login-to-chat" class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition">
                            Login / Sign Up
                        </button>
                    </div>
                    
                    <!-- Blocked user message -->
                    <div id="blocked-message" class="blocked-message hidden">
                        <p class="font-medium">You have been blocked from sending messages</p>
                        <p id="blocked-reason" class="blocked-reason"></p>
                    </div>
                    
                    <div id="chat-input-container" class="chat-input">
                        <div class="flex flex-col w-full">
                            <div class="chat-actions">
                                <button id="photo-upload-btn" class="chat-action-btn">
                                    <i class="fas fa-image"></i>
                                </button>
                                <button id="video-upload-btn" class="chat-action-btn">
                                    <i class="fas fa-video"></i>
                                </button>
                                <button id="audio-upload-btn" class="chat-action-btn">
                                    <i class="fas fa-microphone"></i>
                                </button>
                                <button id="emoji-btn" class="chat-action-btn">
                                    <i class="fas fa-smile"></i>
                                </button>
                            </div>
                            <div id="attachment-preview" class="attachment-preview"></div>
                            <textarea id="chat-input" placeholder="Type a message..." class="w-full" rows="1"></textarea>
                            <div id="upload-progress" class="upload-progress">
                                <div id="upload-progress-bar" class="upload-progress-bar"></div>
                            </div>
                        </div>
                        <button id="send-message" class="bg-blue-500 text-white">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                        <input type="file" id="media-upload" accept="image/*,video/*,audio/*" class="hidden">
                    </div>
                </div>
                
                <!-- Users list sidebar -->
                <div id="chat-users" class="chat-users">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="font-bold">Online Users</h3>
                        <button id="close-users-list" class="text-gray-500">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div id="users-list" class="space-y-2">
                        <!-- Users will be added here -->
                    </div>
                </div>
            </div>
        </section>

        <!-- Library Section -->
        <section id="library-section" class="section">
            <h2 class="text-3xl mb-6 text-gray-800">Library</h2>
            <div class="bg-white border border-gray-200 p-6 rounded-2xl shadow-sm">
                <div class="mb-4">
                    <h3 class="text-xl mb-3 text-gray-800">Categories</h3>
                    <div class="grid grid-cols-3 gap-3">
                        <button class="bg-blue-100 text-blue-700 p-3 rounded-lg hover:bg-blue-200 transition">
                            Videos
                        </button>
                        <button class="bg-green-100 text-green-700 p-3 rounded-lg hover:bg-green-200 transition">
                            Audio
                        </button>
                        <button class="bg-purple-100 text-purple-700 p-3 rounded-lg hover:bg-purple-200 transition">
                            Photos
                        </button>
                    </div>
                </div>
                
                <div class="mb-4">
                    <h3 class="text-xl mb-3 text-gray-800">Platforms</h3>
                    <div class="grid grid-cols-2 gap-3">
                        <button class="bg-gray-100 text-gray-700 p-3 rounded-lg hover:bg-gray-200 transition flex items-center justify-center">
                            <i class="fab fa-youtube text-red-500 mr-2"></i> YouTube
                        </button>
                        <button class="bg-gray-100 text-gray-700 p-3 rounded-lg hover:bg-gray-200 transition flex items-center justify-center">
                            <i class="fab fa-tiktok text-black mr-2"></i> TikTok
                        </button>
                        <button class="bg-gray-100 text-gray-700 p-3 rounded-lg hover:bg-gray-200 transition flex items-center justify-center">
                            <i class="fab fa-instagram text-pink-500 mr-2"></i> Instagram
                        </button>
                        <button class="bg-gray-100 text-gray-700 p-3 rounded-lg hover:bg-gray-200 transition flex items-center justify-center">
                            <i class="fab fa-facebook text-blue-500 mr-2"></i> Facebook
                        </button>
                    </div>
                </div>
                
                <div>
                    <h3 class="text-xl mb-3 text-gray-800">Recent Downloads</h3>
                    <div id="library-items" class="space-y-3">
                        <!-- Library items will be dynamically added here -->
                    </div>
                </div>
            </div>
        </section>

        <!-- Contact Section -->
        <section id="contact-section" class="section">
            <h2 class="text-3xl mb-6 text-gray-800">Contact Us</h2>
            
            <div class="contact-section">
                <div class="contact-alert mb-6">
                    <p>Please use your real email address or you won't receive a response!</p>
                </div>
                
                <div id="contact-page-success" class="contact-success mb-6">
                    <p>Thank you for your message! We'll get back to you shortly.</p>
                </div>
                
                <form id="contact-page-form" class="space-y-4">
                    <div>
                        <label for="contact-page-name" class="block text-gray-700 mb-2">Your Name</label>
                        <input type="text" id="contact-page-name" name="from_name" placeholder="Enter your name" 
                            class="w-full bg-gray-100 text-gray-800 p-3 rounded-lg border border-gray-200" required>
                    </div>

                    <div>
                        <label for="contact-page-email" class="block text-gray-700 mb-2">Your Email</label>
                        <input type="email" id="contact-page-email" name="reply_to" placeholder="Enter your email" 
                            class="w-full bg-gray-100 text-gray-800 p-3 rounded-lg border border-gray-200" required>
                    </div>

                    <div>
                        <label for="contact-page-subject" class="block text-gray-700 mb-2">Subject</label>
                        <input type="text" id="contact-page-subject" name="subject" placeholder="Enter subject" 
                            class="w-full bg-gray-100 text-gray-800 p-3 rounded-lg border border-gray-200" required>
                    </div>

                    <div>
                        <label for="contact-page-message" class="block text-gray-700 mb-2">Message</label>
                        <textarea id="contact-page-message" name="message" placeholder="Enter your message" rows="5"
                            class="w-full bg-gray-100 text-gray-800 p-3 rounded-lg border border-gray-200" required></textarea>
                    </div>

                    <button type="submit" id="send-contact-page" 
                        class="w-full bg-blue-500 text-white p-3 rounded-lg hover:bg-blue-600 transition">
                        Send Message
                    </button>
                </form>
            </div>
            
            <div class="mt-8">
                <h3 class="text-2xl mb-4 text-gray-800">FAQ</h3>
                <div class="space-y-4">
                    <div class="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
                        <h4 class="font-bold text-lg mb-2">How does RedLoad work?</h4>
                        <p class="text-gray-700">RedLoad allows you to download content from various social media platforms by simply pasting the URL of the content you want to download.</p>
                    </div>
                    <div class="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
                        <h4 class="font-bold text-lg mb-2">Is RedLoad free to use?</h4>
                        <p class="text-gray-700">Yes, RedLoad is completely free to use for all users. No hidden fees or subscriptions required.</p>
                    </div>
                    <div class="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
                        <h4 class="font-bold text-lg mb-2">What platforms are supported?</h4>
                        <p class="text-gray-700">Currently, RedLoad supports YouTube, TikTok, Instagram, and Facebook. We're always working to add more platforms!</p>
                    </div>
                </div>
            </div>
        </section>

        <!-- Settings Section -->
        <section id="settings-section" class="section">
            <h2 class="text-3xl mb-6 text-gray-800">Settings</h2>
            <div class="bg-white border border-gray-200 p-6 rounded-2xl shadow-sm space-y-6">
                <div class="flex justify-between items-center">
                    <span class="text-gray-800">App Theme</span>
                    <select id="theme-select" class="bg-gray-100 text-gray-800 p-2 rounded border border-gray-200">
                        <option value="light">Light</option>
                        <option value="dark">Dark</option>
                        <option value="system">System</option>
                    </select>
                </div>
                <div class="flex justify-between items-center">
                    <span class="text-gray-800">Download Directory</span>
                    <input type="text" id="download-directory" class="bg-gray-100 text-gray-800 p-2 rounded border border-gray-200" placeholder="/Downloads">
                </div>
                <div class="flex justify-between items-center">
                    <span class="text-gray-800">Preferred Format</span>
                    <select id="format-select" class="bg-gray-100 text-gray-800 p-2 rounded border border-gray-200">
                        <option value="mp4">MP4</option>
                        <option value="mp3">MP3</option>
                        <option value="wav">WAV</option>
                    </select>
                </div>
                <div class="flex justify-between items-center">
                    <span class="text-gray-800">Default Quality</span>
                    <select id="default-quality" class="bg-gray-100 text-gray-800 p-2 rounded border border-gray-200">
                        <option value="highest">Highest</option>
                        <option value="high">High</option>
                        <option value="medium">Medium</option>
                        <option value="low">Low</option>
                    </select>
                </div>
                <div class="flex justify-between items-center">
                    <span class="text-gray-800">Language</span>
                    <select id="language-select" class="bg-gray-100 text-gray-800 p-2 rounded border border-gray-200">
                        <option value="en">English</option>
                        <option value="it">Italian</option>
                        <option value="es">Spanish</option>
                        <option value="fr">French</option>
                        <option value="de">German</option>
                    </select>
                </div>
                <div class="flex justify-between items-center">
                    <span class="text-gray-800">Notifications</span>
                    <label class="inline-flex items-center cursor-pointer">
                        <div class="relative">
                            <input id="notifications-toggle" type="checkbox" class="sr-only peer" checked>
                            <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500"></div>
                            </div>
                        </label>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="text-gray-800">Email Notifications</span>
                        <label class="inline-flex items-center cursor-pointer">
                            <div class="relative">
                                <input id="email-notifications-toggle" type="checkbox" class="sr-only peer">
                                <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500"></div>
                            </div>
                        </label>
                    </div>

                <div class="advanced-settings">
                    <div class="settings-group-title">Advanced Settings</div>
                    
                    <div class="settings-group">
                        <div class="flex justify-between items-center mb-2">
                            <span class="text-gray-800">Auto-convert to MP3</span>
                            <label class="inline-flex items-center cursor-pointer">
                                <div class="relative">
                                    <input id="auto-convert-toggle" type="checkbox" class="sr-only peer">
                                    <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500"></div>
                                </div>
                            </label>
                        </div>
                        <div class="flex justify-between items-center mb-2">
                            <span class="text-gray-800">Auto-download</span>
                            <label class="inline-flex items-center cursor-pointer">
                                <div class="relative">
                                    <input id="auto-download-toggle" type="checkbox" class="sr-only peer">
                                    <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500"></div>
                                </div>
                            </label>
                        </div>
                        <div class="flex justify-between items-center mb-2">
                            <span class="text-gray-800">Background processing</span>
                            <label class="inline-flex items-center cursor-pointer">
                                <div class="relative">
                                    <input id="background-processing-toggle" type="checkbox" class="sr-only peer" checked>
                                    <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500"></div>
                                </div>
                            </label>
                        </div>
                    </div>

                    <div class="settings-group">
                        <div class="settings-group-title">Data & Privacy</div>
                        <div class="flex justify-between items-center mb-2">
                            <span class="text-gray-800">Save download history</span>
                            <label class="inline-flex items-center cursor-pointer">
                                <div class="relative">
                                    <input id="save-history-toggle" type="checkbox" class="sr-only peer" checked>
                                    <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500"></div>
                                </div>
                            </label>
                        </div>
                        <div class="flex justify-between items-center mb-2">
                            <span class="text-gray-800">Usage analytics</span>
                            <label class="inline-flex items-center cursor-pointer">
                                <div class="relative">
                                    <input id="analytics-toggle" type="checkbox" class="sr-only peer" checked>
                                    <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500"></div>
                                </div>
                            </label>
                        </div>
                    </div>
                </div>

                <button id="save-settings" class="w-full bg-blue-500 text-white p-3 rounded-lg hover:bg-blue-600 transition">
                    Save Settings
                </button>
            </div>
        </section>
    </main>
</div>

<!-- Firebase Integration -->
<script type="module">
    // Import the functions you need from the SDKs you need
    import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-app.js";
    import { getAnalytics } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-analytics.js";
    import { 
        getAuth, 
        createUserWithEmailAndPassword, 
        signInWithEmailAndPassword, 
        onAuthStateChanged, 
        signOut, 
        signInWithPopup, 
        GoogleAuthProvider, 
        updateProfile, 
        sendEmailVerification,
        updatePassword,
        reauthenticateWithCredential,
        EmailAuthProvider
    } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-auth.js";
    import { getDatabase, ref, set, onValue, push, remove, update, query, orderByChild, limitToLast, onChildAdded, onChildChanged, onChildRemoved, serverTimestamp, onDisconnect, get } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-database.js";
    import { getStorage, ref as storageRef, uploadBytes, getDownloadURL, uploadBytesResumable } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-storage.js";

    // Your web app's Firebase configuration
    const firebaseConfig = {
        apiKey: "AIzaSyDsG696dtUXBr2a0DXB1WXlmdx2RoHYItc",
        authDomain: "sing-in-sing-up-35ffc.firebaseapp.com",
        projectId: "sing-in-sing-up-35ffc",
        storageBucket: "sing-in-sing-up-35ffc.firebasestorage.app",
        messagingSenderId: "601804043161",
        appId: "1:601804043161:web:8eb591c60c93352411d908",
        measurementId: "G-JR8WR68YDY",
        databaseURL: "https://realtime-database-b5320-default-rtdb.firebaseio.com/"
    };

    // Initialize Firebase
    const app = initializeApp(firebaseConfig);
    const analytics = getAnalytics(app);
    const auth = getAuth(app);
    const database = getDatabase(app);
    const storage = getStorage(app);
    const googleProvider = new GoogleAuthProvider();

    // API Configuration
    const RAPID_API_KEY = 'c45e3a9bb9mshdc35687e676d5bap19dbdejsn6b4e0db401f0';
    const RAPID_API_HOST = 'social-media-video-downloader.p.rapidapi.com';

    // Application State
    let currentUser = null;
    let isLoginMode = true;
    let theme = localStorage.getItem('theme') || 'light';
    let downloads = [];
    let notifications = [];
    let isSelectionMode = false;
    let selectedItems = new Set();
    let settings = {
        theme: 'light',
        language: 'en',
        downloadDirectory: '/Downloads',
        preferredFormat: 'mp4',
        defaultQuality: 'highest',
        notificationsEnabled: true,
        emailNotificationsEnabled: false,
        autoConvert: false,
        autoDownload: false,
        backgroundProcessing: true,
        saveHistory: true,
        analytics: true
    };
    let mediaAttachments = [];
    let messages = [];
    let isAdmin = false;
    let onlineUsers = {};
    let typingUsers = {};
    let typingTimeout = null;
    let chatSettings = {
        theme: 'blue',
        fontSize: 'medium',
        messageDisplay: 'bubbles',
        sound: true,
        desktopNotifications: true,
        showTyping: true
    };
    let currentFilter = 'all';
    let socialAccounts = [];
    let uploadTask = null;
    let blockedUsers = {};

    // DOM Elements
    const splashScreen = document.getElementById('splash-screen');
    const sidebar = document.getElementById('sidebar');
    const notificationPanel = document.getElementById('notification-panel');
    const authModal = document.getElementById('auth-modal');
    const profileModal = document.getElementById('profile-modal');
    const securityModal = document.getElementById('security-modal');
    const contactModal = document.getElementById('contact-modal');
    const chatSettingsModal = document.getElementById('chat-settings-modal');
    const mediaModal = document.getElementById('media-modal');
    const notificationBadge = document.getElementById('notification-badge');
    const errorMessage = document.getElementById('error-message');
    const downloadList = document.getElementById('download-list');
    const libraryItems = document.getElementById('library-items');
    const selectionActions = document.getElementById('selection-actions');
    const authForm = document.getElementById('auth-form');
    const authErrorElement = document.getElementById('auth-error');
    const authEmailInput = document.getElementById('auth-email');
    const authPasswordInput = document.getElementById('auth-password');
    const authSubmitButton = document.getElementById('auth-submit');
    const authSwitchButton = document.getElementById('auth-switch');
    const googleAuthButton = document.getElementById('google-auth');
    const profileNameElement = document.getElementById('profile-name');
    const profileEmailElement = document.getElementById('profile-email');
    const profileImageElement = document.getElementById('profile-image');
    const displayNameInput = document.getElementById('display-name');
    const bioInput = document.getElementById('bio');
    const locationInput = document.getElementById('location');
    const websiteInput = document.getElementById('website');
    const socialPlatformSelect = document.getElementById('social-platform');
    const socialUsernameInput = document.getElementById('social-username');
    const socialLinkInput = document.getElementById('social-link');
    const addSocialBtn = document.getElementById('add-social-btn');
    const socialAccountsList = document.getElementById('social-accounts');
    const photoUploadInput = document.getElementById('photo-upload');
    const saveProfileButton = document.getElementById('save-profile');
    const logoutButton = document.getElementById('logout-btn');
    const logoutAllDevicesButton = document.getElementById('logout-all-devices');
    const changePhotoButton = document.getElementById('change-photo');
    const verificationBanner = document.getElementById('verification-banner');
    const sendVerificationButton = document.getElementById('send-verification');
    const platformSelect = document.getElementById('platform-select');
    const videoUrlInput = document.getElementById('video-url-input');
    const downloadBtn = document.getElementById('download-btn');
    const themeSelect = document.getElementById('theme-select');
    const downloadDirectoryInput = document.getElementById('download-directory');
    const formatSelect = document.getElementById('format-select');
    const qualitySelect = document.getElementById('default-quality');
    const languageSelect = document.getElementById('language-select');
    const notificationsToggle = document.getElementById('notifications-toggle');
    const emailNotificationsToggle = document.getElementById('email-notifications-toggle');
    const autoConvertToggle = document.getElementById('auto-convert-toggle');
    const autoDownloadToggle = document.getElementById('auto-download-toggle');
    const backgroundProcessingToggle = document.getElementById('background-processing-toggle');
    const saveHistoryToggle = document.getElementById('save-history-toggle');
    const analyticsToggle = document.getElementById('analytics-toggle');
    const saveSettingsButton = document.getElementById('save-settings');
    const selectDownloadsButton = document.getElementById('select-downloads');
    const clearDownloadsButton = document.getElementById('clear-downloads');
    const cancelSelectionButton = document.getElementById('cancel-selection');
    const deleteSelectedButton = document.getElementById('delete-selected');
    const chatMessages = document.getElementById('chat-messages');
    const chatInput = document.getElementById('chat-input');
    const sendMessageButton = document.getElementById('send-message');
    const photoUploadBtn = document.getElementById('photo-upload-btn');
    const videoUploadBtn = document.getElementById('video-upload-btn');
    const audioUploadBtn = document.getElementById('audio-upload-btn');
    const emojiBtn = document.getElementById('emoji-btn');
    const mediaUploadInput = document.getElementById('media-upload');
    const attachmentPreview = document.getElementById('attachment-preview');
    const uploadProgress = document.getElementById('upload-progress');
    const uploadProgressBar = document.getElementById('upload-progress-bar');
    const mediaModalContent = document.querySelector('.media-modal-content');
    const closeMediaModalButton = document.querySelector('.close-media-modal');
    const typingIndicator = document.getElementById('typing-indicator');
    const onlineUsersCount = document.getElementById('online-users-count');
    const toggleUsersList = document.getElementById('toggle-users-list');
    const chatUsers = document.getElementById('chat-users');
    const closeUsersList = document.getElementById('close-users-list');
    const usersList = document.getElementById('users-list');
    const changePasswordBtn = document.getElementById('change-password-btn');
    const securityForm = document.getElementById('security-form');
    const securityErrorElement = document.getElementById('security-error');
    const currentPasswordInput = document.getElementById('current-password');
    const newPasswordInput = document.getElementById('new-password');
    const confirmPasswordInput = document.getElementById('confirm-password');
    const updatePasswordBtn = document.getElementById('update-password-btn');
    const profileTabs = document.querySelectorAll('.profile-tab');
    const profileSections = document.querySelectorAll('.profile-section');
    const filterOptions = document.querySelectorAll('.filter-option');
    const loginPrompt = document.getElementById('login-prompt');
    const loginToChat = document.getElementById('login-to-chat');
    const chatSettingsBtn = document.getElementById('chat-settings-btn');
    const closeChatSettings = document.getElementById('close-chat-settings');
    const saveChatSettings = document.getElementById('save-chat-settings');
    const chatThemeOptions = document.querySelectorAll('.chat-theme-option');
    const chatFontSize = document.getElementById('chat-font-size');
    const chatMessageDisplay = document.getElementById('chat-message-display');
    const chatSoundToggle = document.getElementById('chat-sound-toggle');
    const chatDesktopNotifToggle = document.getElementById('chat-desktop-notif-toggle');
    const chatTypingToggle = document.getElementById('chat-typing-toggle');
    const strengthBars = [
        document.getElementById('strength-1'),
        document.getElementById('strength-2'),
        document.getElementById('strength-3'),
        document.getElementById('strength-4')
    ];
    const strengthText = document.getElementById('strength-text');
    const adminPanel = document.getElementById('admin-panel');
    const userList = document.getElementById('user-list');
    const blockedMessage = document.getElementById('blocked-message');
    const blockedReason = document.getElementById('blocked-reason');
    
    // Contact Form Elements
    const contactForm = document.getElementById('contact-form');
    const contactPageForm = document.getElementById('contact-page-form');
    const contactSuccess = document.getElementById('contact-success');
    const contactPageSuccess = document.getElementById('contact-page-success');
    const closeContact = document.getElementById('close-contact');

    // Initialize Application
    document.addEventListener('DOMContentLoaded', function() {
        // Splash Screen
        setTimeout(() => {
            splashScreen.style.opacity = '0';
            splashScreen.style.transition = 'opacity 0.5s ease-in-out';
            setTimeout(() => {
                splashScreen.style.display = 'none';
            }, 500);
        }, 3000);

        // Apply Saved Theme
        document.body.dataset.theme = theme;
        themeSelect.value = theme;

        // Auth State Listener
        onAuthStateChanged(auth, (user) => {
            currentUser = user;
            if (user) {
                // User is signed in
                profileNameElement.textContent = user.displayName || 'User';
                profileEmailElement.textContent = user.email;
                displayNameInput.value = user.displayName || '';
                if (user.photoURL) {
                    profileImageElement.src = user.photoURL;
                } else {
                    profileImageElement.src = 'https://via.placeholder.com/150?text=' + (user.displayName?.[0] || 'U');
                }

                // Check if user is admin
                isAdmin = user.email === 'redi.shqipez@gmail.com';
                
                // Show admin panel if admin
                if (isAdmin) {
                    adminPanel.classList.remove('hidden');
                    loadUsersForModeration();
                } else {
                    adminPanel.classList.add('hidden');
                }
                
                // Check if user is blocked
                checkIfUserBlocked(user.uid);

                // Check if email is verified
                if (!user.emailVerified) {
                    verificationBanner.classList.remove('hidden');
                } else {
                    verificationBanner.classList.add('hidden');
                }

                // Load user downloads
                const userDownloadsRef = ref(database, `users/${user.uid}/downloads`);
                onValue(userDownloadsRef, (snapshot) => {
                    const data = snapshot.val();
                    if (data) {
                        downloads = Object.keys(data).map(key => ({
                            id: key,
                            ...data[key]
                        })).sort((a, b) => b.timestamp - a.timestamp);
                        renderDownloads();
                        renderLibrary();
                    } else {
                        downloads = [];
                        renderDownloads();
                        renderLibrary();
                    }
                });

                // Load user settings
                const userSettingsRef = ref(database, `users/${user.uid}/settings`);
                onValue(userSettingsRef, (snapshot) => {
                    const data = snapshot.val();
                    if (data) {
                        settings = {...settings, ...data};
                        applySettings();
                    }
                });

                // Load user profile
                const userProfileRef = ref(database, `users/${user.uid}/profile`);
                onValue(userProfileRef, (snapshot) => {
                    const data = snapshot.val();
                    if (data) {
                        bioInput.value = data.bio || '';
                        locationInput.value = data.location || '';
                        websiteInput.value = data.website || '';
                        socialPlatformSelect.value = data.platform || '';
                        socialUsernameInput.value = data.username || '';
                        socialLinkInput.value = data.link || '';
                        
                        // Load social accounts
                        if (data.socialAccounts) {
                            socialAccounts = data.socialAccounts;
                            renderSocialAccounts();
                        }
                    }
                });
                
                // Load chat settings
                const chatSettingsRef = ref(database, `users/${user.uid}/chatSettings`);
                onValue(chatSettingsRef, (snapshot) => {
                    const data = snapshot.val();
                    if (data) {
                        chatSettings = {...chatSettings, ...data};
                        applyChatSettings();
                    }
                });
                
                // Update user presence
                const userStatusRef = ref(database, `status/${user.uid}`);
                const userStatusData = {
                    displayName: user.displayName || 'User',
                    photoURL: user.photoURL || null,
                    online: true,
                    lastActive: serverTimestamp(),
                    isAdmin: isAdmin
                };
                
                // When user disconnects, update the lastActive timestamp
                const userStatusOfflineData = {
                    ...userStatusData,
                    online: false,
                    lastActive: serverTimestamp()
                };
                
                // Set up presence system
                const connectedRef = ref(database, '.info/connected');
                onValue(connectedRef, (snap) => {
                    if (snap.val() === true) {
                        // User is online
                        set(userStatusRef, userStatusData);
                        
                        // When user disconnects, update the lastActive timestamp
                        onDisconnect(userStatusRef).set(userStatusOfflineData);
                    }
                });
                
                // Hide login prompt in chat
                loginPrompt.classList.add('hidden');
                
                // Enable chat input if not blocked
                if (!isUserBlocked(user.uid)) {
                    enableChatInput();
                } else {
                    disableChatInput();
                    showBlockedMessage(blockedUsers[user.uid]);
                }
                
                addNotification('Logged In', 'Welcome to RedLoad!', 'success');
            } else {
                // User is signed out
                profileNameElement.textContent = 'User';
                profileEmailElement.textContent = 'Not logged in';
                profileImageElement.src = 'https://via.placeholder.com/150?text=U';
                displayNameInput.value = '';
                bioInput.value = '';
                locationInput.value = '';
                websiteInput.value = '';
                socialPlatformSelect.value = '';
                socialUsernameInput.value = '';
                socialLinkInput.value = '';
                socialAccounts = [];
                downloads = [];
                isAdmin = false;
                adminPanel.classList.add('hidden');
                renderDownloads();
                renderLibrary();
                renderSocialAccounts();
                
                // Show login prompt in chat
                loginPrompt.classList.remove('hidden');
                disableChatInput();
            }

            // Load chat messages regardless of auth state
            setupChatRealtime();
            
            // Load online users
            loadOnlineUsers();
            
            // Load blocked users
            loadBlockedUsers();
        });

        // Event Listeners
        setupEventListeners();
    });

    // Setup Event Listeners
    function setupEventListeners() {
        // Sidebar Navigation
        document.getElementById('toggle-sidebar').addEventListener('click', () => {
            sidebar.classList.add('active');
        });

        document.getElementById('close-sidebar').addEventListener('click', () => {
            sidebar.classList.remove('active');
        });

        const sidebarOptions = document.querySelectorAll('.sidebar-option');
        sidebarOptions.forEach(option => {
            option.addEventListener('click', function() {
                const sections = document.querySelectorAll('.section');
                sections.forEach(section => section.classList.remove('active'));
                
                const sectionId = this.id.split('-')[0] + '-section';
                document.getElementById(sectionId).classList.add('active');
                
                sidebar.classList.remove('active');
            });
        });

        // Notifications
        document.getElementById('notifications-btn').addEventListener('click', () => {
            notificationPanel.classList.toggle('active');
        });

        document.getElementById('close-notifications').addEventListener('click', () => {
            notificationPanel.classList.remove('active');
        });

        // Profile
        document.getElementById('profile-btn').addEventListener('click', () => {
            if (currentUser) {
                profileModal.classList.add('active');
            } else {
                authModal.classList.add('active');
            }
        });

        document.getElementById('close-profile').addEventListener('click', () => {
            profileModal.classList.remove('active');
        });

        // Contact Modal
        closeContact?.addEventListener('click', () => {
            contactModal.classList.remove('active');
        });

        // Profile Tabs
        profileTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                // Remove active class from all tabs and sections
                profileTabs.forEach(t => t.classList.remove('active'));
                profileSections.forEach(s => s.classList.remove('active'));
                
                // Add active class to clicked tab and corresponding section
                tab.classList.add('active');
                const tabName = tab.dataset.tab;
                document.getElementById(`${tabName}-section`).classList.add('active');
            });
        });

        // Security Modal
        changePasswordBtn.addEventListener('click', () => {
            securityModal.classList.add('active');
        });

        document.getElementById('close-security').addEventListener('click', () => {
            securityModal.classList.remove('active');
            securityErrorElement.classList.add('hidden');
            currentPasswordInput.value = '';
            newPasswordInput.value = '';
            confirmPasswordInput.value = '';
        });

        // Chat Theme Options
        chatThemeOptions.forEach(option => {
            option.addEventListener('click', () => {
                chatThemeOptions.forEach(opt => opt.classList.remove('border-4', 'border-white'));
                option.classList.add('border-4', 'border-white');
                chatSettings.theme = option.dataset.theme;
            });
        });

        // Auth Modal
        document.getElementById('close-auth').addEventListener('click', () => {
            authModal.classList.remove('active');
            authErrorElement.classList.add('hidden');
            authEmailInput.value = '';
            authPasswordInput.value = '';
        });

        // Auth Form
        authForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const email = authEmailInput.value.trim();
            const password = authPasswordInput.value;

            if (!email || !password) {
                showAuthError('Please enter both email and password');
                return;
            }

            if (isLoginMode) {
                // Login
                signInWithEmailAndPassword(auth, email, password)
                    .then(() => {
                        authModal.classList.remove('active');
                        clearAuthForm();
                    })
                    .catch((error) => {
                        showAuthError(getAuthErrorMessage(error.code));
                    });
            } else {
                // Register
                createUserWithEmailAndPassword(auth, email, password)
                    .then((userCredential) => {
                        // Send email verification
                        sendEmailVerification(userCredential.user);
                        authModal.classList.remove('active');
                        clearAuthForm();
                        addNotification('Verification Email Sent', 'Please check your inbox to verify your email address', 'info');
                    })
                    .catch((error) => {
                        showAuthError(getAuthErrorMessage(error.code));
                    });
            }
        });

        // Contact Forms
        if (contactForm) {
            contactForm.addEventListener('submit', function(e) {
                e.preventDefault();
                sendContactForm(this, contactSuccess);
            });
        }

        if (contactPageForm) {
            contactPageForm.addEventListener('submit', function(e) {
                e.preventDefault();
                sendContactForm(this, contactPageSuccess);
            });
        }

        // Password strength meter
        newPasswordInput.addEventListener('input', function() {
            updatePasswordStrength(this.value);
        });

        // Security Form
        securityForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const currentPassword = currentPasswordInput.value;
            const newPassword = newPasswordInput.value;
            const confirmPassword = confirmPasswordInput.value;

            if (!currentPassword || !newPassword || !confirmPassword) {
                showSecurityError('Please fill in all fields');
                return;
            }

            if (newPassword !== confirmPassword) {
                showSecurityError('New passwords do not match');
                return;
            }

            if (newPassword.length < 8) {
                showSecurityError('Password must be at least 8 characters');
                return;
            }

            updateUserPassword(currentPassword, newPassword);
        });

        // Google Auth
        googleAuthButton.addEventListener('click', () => {
            signInWithPopup(auth, googleProvider)
                .then(() => {
                    authModal.classList.remove('active');
                })
                .catch((error) => {
                    showAuthError('Failed to sign in with Google');
                    console.error(error);
                });
        });

        // Switch Auth Mode
        authSwitchButton.addEventListener('click', () => {
            isLoginMode = !isLoginMode;
            if (isLoginMode) {
                authSwitchButton.textContent = "Don't have an account? Sign Up";
                authSubmitButton.textContent = "Sign In";
            } else {
                authSwitchButton.textContent = "Already have an account? Sign In";
                authSubmitButton.textContent = "Sign Up";
            }
            clearAuthForm();
        });

        // Logout
        logoutButton.addEventListener('click', () => {
            signOut(auth)
                .then(() => {
                    profileModal.classList.remove('active');
                    addNotification('Logged Out', 'You have been successfully logged out', 'info');
                })
                .catch((error) => {
                    addNotification('Logout Failed', 'There was an error logging out', 'error');
                    console.error(error);
                });
        });

        // Logout from all devices
        logoutAllDevicesButton.addEventListener('click', () => {
            if (confirm('Are you sure you want to log out from all devices?')) {
                // This would typically involve revoking refresh tokens on the server
                // For now, we'll just log out the current session
                signOut(auth)
                    .then(() => {
                        profileModal.classList.remove('active');
                        addNotification('Logged Out', 'You have been logged out from all devices', 'info');
                    })
                    .catch((error) => {
                        addNotification('Logout Failed', 'There was an error logging out', 'error');
                        console.error(error);
                    });
            }
        });

        // Send Email Verification
        sendVerificationButton.addEventListener('click', () => {
            if (currentUser && !currentUser.emailVerified) {
                sendEmailVerification(currentUser)
                    .then(() => {
                        addNotification('Verification Email Sent', 'Please check your inbox to verify your email address', 'success');
                    })
                    .catch((error) => {
                        addNotification('Verification Failed', 'Failed to send verification email', 'error');
                        console.error(error);
                    });
            }
        });

        // Profile Photo Upload
        changePhotoButton.addEventListener('click', () => {
            photoUploadInput.click();
        });

        photoUploadInput.addEventListener('change', (e) => {
            if (e.target.files.length > 0) {
                const file = e.target.files[0];
                uploadProfilePhoto(file);
            }
        });

        // Save Profile
        saveProfileButton.addEventListener('click', () => {
            updateUserProfile();
        });

        // Add Social Account
        addSocialBtn?.addEventListener('click', () => {
            addSocialAccount();
        });

        // Platform Quick Select
        const platformButtons = document.querySelectorAll('.platform-btn');
        platformButtons.forEach(button => {
            button.addEventListener('click', function() {
                const platform = this.id.split('-')[0];
                platformSelect.value = platform;
            });
        });

        // Download Content
        downloadBtn.addEventListener('click', () => {
            downloadContent();
        });

        // Save Settings
        saveSettingsButton.addEventListener('click', () => {
            saveUserSettings();
        });

        // Save Chat Settings
        saveChatSettings.addEventListener('click', () => {
            saveChatSettingsToDatabase();
            chatSettingsModal.classList.remove('active');
        });

        // Theme Change
        themeSelect.addEventListener('change', function() {
            const newTheme = this.value;
            setTheme(newTheme);
        });

        // Selection Mode
        selectDownloadsButton.addEventListener('click', () => {
            isSelectionMode = true;
            document.getElementById('download-list').classList.add('selection-mode');
            selectionActions.classList.remove('hidden');
            selectDownloadsButton.classList.add('hidden');
            clearDownloadsButton.classList.add('hidden');
        });

        cancelSelectionButton.addEventListener('click', () => {
            isSelectionMode = false;
            document.getElementById('download-list').classList.remove('selection-mode');
            selectionActions.classList.add('hidden');
            selectDownloadsButton.classList.remove('hidden');
            clearDownloadsButton.classList.remove('hidden');
            selectedItems.clear();
            renderDownloads();
        });

        deleteSelectedButton.addEventListener('click', () => {
            deleteSelectedDownloads();
        });

        clearDownloadsButton.addEventListener('click', () => {
            clearAllDownloads();
        });

        // Chat functionality
        sendMessageButton.addEventListener('click', () => {
            sendChatMessage();
        });

        chatInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendChatMessage();
            }
        });

        // Login to chat
        loginToChat.addEventListener('click', () => {
            authModal.classList.add('active');
        });

        // Chat filter options
        filterOptions.forEach(option => {
            option.addEventListener('click', () => {
                filterOptions.forEach(opt => opt.classList.remove('active'));
                option.classList.add('active');
                currentFilter = option.dataset.filter;
                filterChatMessages();
            });
        });

        // Chat settings
        chatSettingsBtn.addEventListener('click', () => {
            chatSettingsModal.classList.add('active');
        });

        closeChatSettings.addEventListener('click', () => {
            chatSettingsModal.classList.remove('active');
        });

        // Typing indicator
        chatInput.addEventListener('input', () => {
            if (!currentUser || !chatSettings.showTyping) return;
            
            // Clear previous timeout
            if (typingTimeout) {
                clearTimeout(typingTimeout);
            }
            
            // Set user as typing
            const typingRef = ref(database, `typing/${currentUser.uid}`);
            set(typingRef, {
                displayName: currentUser.displayName || 'User',
                timestamp: Date.now()
            });
            
            // Clear typing status after 3 seconds of inactivity
            typingTimeout = setTimeout(() => {
                const typingRef = ref(database, `typing/${currentUser.uid}`);
                remove(typingRef);
            }, 3000);
        });

        // Media upload for chat
        photoUploadBtn.addEventListener('click', () => {
            if (!currentUser) {
                showLoginPrompt();
                return;
            }
            
            if (isUserBlocked(currentUser.uid)) {
                showBlockedMessage(blockedUsers[currentUser.uid]);
                return;
            }
            
            mediaUploadInput.accept = 'image/*';
            mediaUploadInput.click();
        });

        videoUploadBtn.addEventListener('click', () => {
            if (!currentUser) {
                showLoginPrompt();
                return;
            }
            
            if (isUserBlocked(currentUser.uid)) {
                showBlockedMessage(blockedUsers[currentUser.uid]);
                return;
            }
            
            mediaUploadInput.accept = 'video/*';
            mediaUploadInput.click();
        });

        audioUploadBtn.addEventListener('click', () => {
            if (!currentUser) {
                showLoginPrompt();
                return;
            }
            
            if (isUserBlocked(currentUser.uid)) {
                showBlockedMessage(blockedUsers[currentUser.uid]);
                return;
            }
            
            mediaUploadInput.accept = 'audio/*';
            mediaUploadInput.click();
        });

        emojiBtn.addEventListener('click', () => {
            if (!currentUser) {
                showLoginPrompt();
                return;
            }
            
            if (isUserBlocked(currentUser.uid)) {
                showBlockedMessage(blockedUsers[currentUser.uid]);
                return;
            }
            
            // Simple emoji picker (in a real app, you'd use a proper emoji picker library)
            const emojis = ['😀', '😂', '😍', '🤔', '👍', '🎉', '❤️', '🔥'];
            const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];
            chatInput.value += randomEmoji;
            chatInput.focus();
        });

        mediaUploadInput.addEventListener('change', (e) => {
            if (e.target.files.length > 0) {
                handleMediaUpload(e.target.files[0]);
            }
        });

        // Media modal
        closeMediaModalButton.addEventListener('click', () => {
            mediaModal.classList.remove('active');
        });

        // Users list
        toggleUsersList.addEventListener('click', () => {
            chatUsers.classList.toggle('active');
        });

        closeUsersList.addEventListener('click', () => {
            chatUsers.classList.remove('active');
        });
        
        // Contact option
        const contactOption = document.getElementById('contact-option');
        if (contactOption) {
            contactOption.addEventListener('click', () => {
                const contactSection = document.getElementById('contact-section');
                if (contactSection) {
                    // Hide all sections
                    const sections = document.querySelectorAll('.section');
                    sections.forEach(section => section.classList.remove('active'));
                    
                    // Show contact section
                    contactSection.classList.add('active');
                    
                    // Close sidebar
                    sidebar.classList.remove('active');
                }
            });
        }
    }

    // Send Contact Form
    function sendContactForm(form, successElement) {
        // Get form data
        const formData = new FormData(form);
        const templateParams = {
            from_name: formData.get('from_name'),
            reply_to: formData.get('reply_to'),
            subject: formData.get('subject'),
            message: formData.get('message')
        };
        
        console.log("Sending email with params:", templateParams);
        
        // Send email using EmailJS
        emailjs.send('service_yjnxnxl', 'template_yjnxnxl', templateParams)
            .then(function(response) {
                console.log('SUCCESS!', response.status, response.text);
                // Show success message
                form.reset();
                successElement.style.display = 'block';
                setTimeout(() => {
                    successElement.style.display = 'none';
                    if (form.id === 'contact-form') {
                        contactModal.classList.remove('active');
                    }
                }, 3000);
                
                addNotification('Message Sent', 'Your message has been sent successfully!', 'success');
            }, function(error) {
                console.error('FAILED...', error);
                addNotification('Error', 'Failed to send your message. Please try again later.', 'error');
            });
    }

    // Admin Functions
    function loadUsersForModeration() {
        // Get all users from the status node
        const statusRef = ref(database, 'status');
        onValue(statusRef, (snapshot) => {
            const data = snapshot.val();
            if (!data) return;
            
            const users = Object.entries(data)
                .filter(([uid, _]) => uid !== currentUser.uid) // Exclude current admin
                .map(([uid, userData]) => ({
                    uid,
                    displayName: userData.displayName || 'User',
                    photoURL: userData.photoURL,
                    online: userData.online || false,
                    lastActive: userData.lastActive || null
                }));
            
            renderUsersForModeration(users);
        });
    }

    function renderUsersForModeration(users) {
        userList.innerHTML = '';
        
        if (users.length === 0) {
            userList.innerHTML = `
                <div class="text-center py-2 text-gray-500">
                    <p>No users to moderate</p>
                </div>
            `;
            return;
        }
        
        users.forEach(user => {
            const isBlocked = blockedUsers[user.uid];
            const userItem = document.createElement('div');
            userItem.classList.add('user-list-item');
            
            let blockStatus = '';
            if (isBlocked) {
                if (isBlocked.expiresAt === -1) {
                    blockStatus = '<span class="blocked-badge">Permanently Blocked</span>';
                } else {
                    const now = Date.now();
                    if (isBlocked.expiresAt > now) {
                        const timeLeft = Math.ceil((isBlocked.expiresAt - now) / (60 * 1000));
                        blockStatus = `<span class="blocked-badge">Blocked (${timeLeft}m left)</span>`;
                    }
                }
            }
            
            userItem.innerHTML = `
                <div class="user-info">
                    <img src="${user.photoURL || `https://via.placeholder.com/32?text=${user.displayName[0]}`}" 
                        class="user-avatar" alt="${user.displayName}">
                    <div>
                        <p class="font-medium">${user.displayName}</p>
                        ${blockStatus}
                    </div>
                </div>
                <div class="block-actions">
                    ${!isBlocked ? `
                        <button class="block-btn bg-yellow-100 text-yellow-800 hover:bg-yellow-200 block-temp" data-uid="${user.uid}" data-time="5">
                            5m
                        </button>
                        <button class="block-btn bg-orange-100 text-orange-800 hover:bg-orange-200 block-temp" data-uid="${user.uid}" data-time="1440">
                            1d
                        </button>
                        <button class="block-btn bg-red-100 text-red-800 hover:bg-red-200 block-perm" data-uid="${user.uid}">
                            Perm
                        </button>
                    ` : `
                        <button class="block-btn bg-green-100 text-green-800 hover:bg-green-200 unblock-user" data-uid="${user.uid}">
                            Unblock
                        </button>
                    `}
                </div>
            `;
            
            userList.appendChild(userItem);
            
            // Add event listeners to block buttons
            if (!isBlocked) {
                const tempBlockButtons = userItem.querySelectorAll('.block-temp');
                tempBlockButtons.forEach(button => {
                    button.addEventListener('click', () => {
                        const uid = button.dataset.uid;
                        const minutes = parseInt(button.dataset.time);
                        blockUser(uid, minutes);
                    });
                });
                
                const permBlockButton = userItem.querySelector('.block-perm');
                if (permBlockButton) {
                    permBlockButton.addEventListener('click', () => {
                        const uid = permBlockButton.dataset.uid;
                        blockUser(uid, -1); // -1 means permanent
                    });
                }
            } else {
                const unblockButton = userItem.querySelector('.unblock-user');
                if (unblockButton) {
                    unblockButton.addEventListener('click', () => {
                        const uid = unblockButton.dataset.uid;
                        unblockUser(uid);
                    });
                }
            }
        });
    }

    function blockUser(uid, minutes) {
        if (!isAdmin) return;
        
        const now = Date.now();
        const blockData = {
            blockedBy: currentUser.uid,
            blockedAt: now,
            reason: minutes === -1 ? 'Permanently blocked by admin' : `Temporarily blocked by admin for ${minutes} minutes`,
            expiresAt: minutes === -1 ? -1 : now + (minutes * 60 * 1000)
        };
        
        // Save to database
        const blockedUserRef = ref(database, `blockedUsers/${uid}`);
        set(blockedUserRef, blockData)
            .then(() => {
                // Update local state
                blockedUsers[uid] = blockData;
                
                // Refresh admin panel
                loadUsersForModeration();
                
                // Show notification
                const duration = minutes === -1 ? 'permanently' : `for ${minutes} minutes`;
                addNotification('User Blocked', `User has been blocked ${duration}`, 'success');
                
                // Send system message to chat
                const systemMessage = {
                    id: Date.now().toString(),
                    text: `A user has been blocked ${duration} by admin`,
                    userId: 'system',
                    displayName: 'System',
                    timestamp: Date.now(),
                    isSystem: true
                };
                
                const newMessageRef = push(ref(database, 'chat/messages'));
                set(newMessageRef, systemMessage);
            })
            .catch(error => {
                console.error('Error blocking user:', error);
                addNotification('Error', 'Failed to block user', 'error');
            });
    }

    function unblockUser(uid) {
        if (!isAdmin) return;
        
        // Remove from database
        const blockedUserRef = ref(database, `blockedUsers/${uid}`);
        remove(blockedUserRef)
            .then(() => {
                // Update local state
                delete blockedUsers[uid];
                
                // Refresh admin panel
                loadUsersForModeration();
                
                // Show notification
                addNotification('User Unblocked', 'User has been unblocked', 'success');
                
                // Send system message to chat
                const systemMessage = {
                    id: Date.now().toString(),
                    text: 'A user has been unblocked by admin',
                    userId: 'system',
                    displayName: 'System',
                    timestamp: Date.now(),
                    isSystem: true
                };
                
                const newMessageRef = push(ref(database, 'chat/messages'));
                set(newMessageRef, systemMessage);
            })
            .catch(error => {
                console.error('Error unblocking user:', error);
                addNotification('Error', 'Failed to unblock user', 'error');
            });
    }

    function loadBlockedUsers() {
        const blockedUsersRef = ref(database, 'blockedUsers');
        onValue(blockedUsersRef, (snapshot) => {
            const data = snapshot.val();
            blockedUsers = data || {};
            
            // Check if current user is blocked
            if (currentUser) {
                checkIfUserBlocked(currentUser.uid);
            }
            
            // Refresh admin panel if admin
            if (isAdmin) {
                loadUsersForModeration();
            }
        });
    }

    function checkIfUserBlocked(uid) {
        const blockData = blockedUsers[uid];
        
        if (blockData) {
            // Check if block has expired
            if (blockData.expiresAt !== -1 && blockData.expiresAt < Date.now()) {
                // Block expired, remove it
                const blockedUserRef = ref(database, `blockedUsers/${uid}`);
                remove(blockedUserRef);
                return false;
            }
            
            // User is blocked
            showBlockedMessage(blockData);
            disableChatInput();
            return true;
        } else {
            // User is not blocked
            hideBlockedMessage();
            enableChatInput();
            return false;
        }
    }

    function isUserBlocked(uid) {
        const blockData = blockedUsers[uid];
        
        if (blockData) {
            // Check if block has expired
            if (blockData.expiresAt !== -1 && blockData.expiresAt < Date.now()) {
                // Block expired, remove it
                const blockedUserRef = ref(database, `blockedUsers/${uid}`);
                remove(blockedUserRef);
                return false;
            }
            
            return true;
        }
        
        return false;
    }

    function showBlockedMessage(blockData) {
        blockedMessage.classList.remove('hidden');
        
        if (blockData) {
            const now = Date.now();
            
            if (blockData.expiresAt === -1) {
                blockedReason.textContent = 'You have been permanently blocked from sending messages.';
            } else {
                const timeLeft = Math.max(0, blockData.expiresAt - now);
                const minutesLeft = Math.ceil(timeLeft / (60 * 1000));
                
                if (minutesLeft > 60) {
                    const hoursLeft = Math.ceil(minutesLeft / 60);
                    blockedReason.textContent = `Your block will expire in approximately ${hoursLeft} hour(s).`;
                } else {
                    blockedReason.textContent = `Your block will expire in approximately ${minutesLeft} minute(s).`;
                }
            }
        }
    }

    function hideBlockedMessage() {
        blockedMessage.classList.add('hidden');
    }

    function enableChatInput() {
        chatInput.disabled = false;
        sendMessageButton.disabled = false;
        photoUploadBtn.disabled = false;
        videoUploadBtn.disabled = false;
        audioUploadBtn.disabled = false;
        emojiBtn.disabled = false;
    }

    function disableChatInput() {
        chatInput.disabled = true;
        sendMessageButton.disabled = true;
        photoUploadBtn.disabled = true;
        videoUploadBtn.disabled = true;
        audioUploadBtn.disabled = true;
        emojiBtn.disabled = true;
    }

    // Download Functions
    function downloadContent() {
        const platform = platformSelect.value;
        const url = videoUrlInput.value.trim();
        
        if (!platform) {
            showError('Please select a platform');
            return;
        }
        
        if (!url) {
            showError('Please enter a valid URL');
            return;
        }
        
        showError(''); // Clear previous errors
        downloadBtn.disabled = true;
        downloadBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Loading...';
        
        const platformEndpoints = {
            'youtube': 'smvd/get/youtube',
            'tiktok': 'smvd/get/tiktok',
            'instagram': 'smvd/get/instagram',
            'facebook': 'smvd/get/facebook'
        };
        
        const endpoint = platformEndpoints[platform];
        const apiUrl = `https://${RAPID_API_HOST}/${endpoint}?url=${encodeURIComponent(url)}&quality=${settings.defaultQuality}`;
        
        fetch(apiUrl, {
            method: 'GET',
            headers: {
                'x-rapidapi-key': RAPID_API_KEY,
                'x-rapidapi-host': RAPID_API_HOST
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Server error: ' + response.status);
            }
            return response.json();
        })
        .then(result => {
            if (!result.success) {
                throw new Error(result.message || 'Failed to download content');
            }
            
            const downloadItem = {
                id: Date.now().toString(),
                title: result.title || 'Untitled Content',
                platform: platform,
                thumbnail: result.picture || result.thumbnail || 'https://via.placeholder.com/640x360.png?text=No+Thumbnail',
                links: result.links || [],
                format: settings.preferredFormat,
                quality: settings.defaultQuality,
                timestamp: Date.now()
            };
            
            // Save to database if logged in
            if (currentUser) {
                const newDownloadRef = ref(database, `users/${currentUser.uid}/downloads/${downloadItem.id}`);
                set(newDownloadRef, downloadItem);
            }
            
            // Add to state and render
            downloads.unshift(downloadItem);
            renderDownloads();
            renderLibrary();
            
            addNotification('Download Ready', 'Your content is ready to download', 'success');
            videoUrlInput.value = '';
        })
        .catch(error => {
            showError(error.message || 'An unknown error occurred');
            addNotification('Download Failed', error.message || 'An error occurred during download', 'error');
        })
        .finally(() => {
            downloadBtn.disabled = false;
            downloadBtn.innerHTML = 'Download Content';
        });
    }

    // Render Downloads
    function renderDownloads() {
        downloadList.innerHTML = '';
        
        if (downloads.length === 0) {
            downloadList.innerHTML = `
                <div class="text-center py-4 text-gray-500">
                    <p>No downloads yet</p>
                </div>
            `;
            return;
        }
        
        downloads.forEach(item => {
            const downloadItem = document.createElement('div');
            downloadItem.classList.add('download-item', 'bg-white', 'p-4', 'rounded-xl', 'shadow-sm', 'border', 'border-gray-200', 'flex', 'items-center');
            downloadItem.dataset.id = item.id;
            
            let platformIcon = '';
            switch (item.platform) {
                case 'tiktok':
                    platformIcon = '<i class="fab fa-tiktok text-black"></i>';
                    break;
                case 'youtube':
                    platformIcon = '<i class="fab fa-youtube text-red-500"></i>';
                    break;
                case 'instagram':
                    platformIcon = '<i class="fab fa-instagram text-pink-500"></i>';
                    break;
                case 'facebook':
                    platformIcon = '<i class="fab fa-facebook text-blue-500"></i>';
                    break;
                default:
                    platformIcon = '<i class="fas fa-download text-gray-500"></i>';
            }
            
            downloadItem.innerHTML = `
                <div class="selection-checkbox" data-id="${item.id}"></div>
                <div class="flex-shrink-0 mr-4">
                    <img src="${item.thumbnail}" alt="${item.title}" class="w-20 h-20 object-cover rounded-lg">
                </div>
                <div class="flex-grow">
                    <h3 class="font-medium text-gray-800 mb-1">${item.title}</h3>
                    <div class="flex items-center text-sm text-gray-500 mb-2">
                        <span class="mr-2">${platformIcon} ${item.platform}</span>
                        <span>${formatDate(item.timestamp)}</span>
                    </div>
                    <div class="flex flex-wrap gap-2">
                        ${item.links.map(link => `
                            <a href="${link.url}" target="_blank" class="bg-blue-100 text-blue-700 px-3 py-1 rounded-full text-xs hover:bg-blue-200 transition">
                                ${link.type || 'Download'} ${link.quality ? `(${link.quality})` : ''}
                            </a>
                        `).join('')}
                    </div>
                </div>
                <button class="delete-download text-gray-400 hover:text-red-500 ml-2" data-id="${item.id}">
                    <i class="fas fa-trash-alt"></i>
                </button>
            `;
            
            downloadList.appendChild(downloadItem);
            
            // Add event listener to delete button
            const deleteButton = downloadItem.querySelector('.delete-download');
            deleteButton.addEventListener('click', (e) => {
                e.stopPropagation();
                deleteDownload(item.id);
            });
            
            // Add event listener to selection checkbox
            const checkbox = downloadItem.querySelector('.selection-checkbox');
            checkbox.addEventListener('click', (e) => {
                e.stopPropagation();
                toggleSelection(item.id);
            });
            
            // Add event listener to the whole item for selection in selection mode
            downloadItem.addEventListener('click', () => {
                if (isSelectionMode) {
                    toggleSelection(item.id);
                }
            });
        });
    }

    // Render Library
    function renderLibrary() {
        libraryItems.innerHTML = '';
        
        if (downloads.length === 0) {
            libraryItems.innerHTML = `
                <div class="text-center py-4 text-gray-500">
                    <p>No items in your library</p>
                </div>
            `;
            return;
        }
        
        // Show only the first 5 downloads in the library
        const recentDownloads = downloads.slice(0, 5);
        
        recentDownloads.forEach(item => {
            const libraryItem = document.createElement('div');
            libraryItem.classList.add('bg-gray-100', 'p-3', 'rounded-lg', 'flex', 'items-center');
            
            let platformIcon = '';
            switch (item.platform) {
                case 'tiktok':
                    platformIcon = '<i class="fab fa-tiktok text-black"></i>';
                    break;
                case 'youtube':
                    platformIcon = '<i class="fab fa-youtube text-red-500"></i>';
                    break;
                case 'instagram':
                    platformIcon = '<i class="fab fa-instagram text-pink-500"></i>';
                    break;
                case 'facebook':
                    platformIcon = '<i class="fab fa-facebook text-blue-500"></i>';
                    break;
                default:
                    platformIcon = '<i class="fas fa-download text-gray-500"></i>';
            }
            
            libraryItem.innerHTML = `
                <div class="flex-shrink-0 mr-3">
                    <img src="${item.thumbnail}" alt="${item.title}" class="w-12 h-12 object-cover rounded">
                </div>
                <div class="flex-grow">
                    <h4 class="font-medium text-gray-800 text-sm">${truncateText(item.title, 30)}</h4>
                    <div class="flex items-center text-xs text-gray-500">
                        <span class="mr-2">${platformIcon} ${item.platform}</span>
                        <span>${formatDate(item.timestamp)}</span>
                    </div>
                </div>
            `;
            
            libraryItems.appendChild(libraryItem);
        });
    }

    // Delete Download
    function deleteDownload(id) {
        if (confirm('Are you sure you want to delete this download?')) {
            // Remove from database if logged in
            if (currentUser) {
                const downloadRef = ref(database, `users/${currentUser.uid}/downloads/${id}`);
                remove(downloadRef);
            }
            
            // Remove from state
            downloads = downloads.filter(item => item.id !== id);
            
            // Update UI
            renderDownloads();
            renderLibrary();
            
            addNotification('Download Deleted', 'The download has been removed from your history', 'info');
        }
    }

    // Delete Selected Downloads
    function deleteSelectedDownloads() {
        if (selectedItems.size === 0) {
            addNotification('No Selection', 'Please select items to delete', 'info');
            return;
        }
        
        if (confirm(`Are you sure you want to delete ${selectedItems.size} selected download(s)?`)) {
            // Remove from database if logged in
            if (currentUser) {
                selectedItems.forEach(id => {
                    const downloadRef = ref(database, `users/${currentUser.uid}/downloads/${id}`);
                    remove(downloadRef);
                });
            }
            
            // Remove from state
            downloads = downloads.filter(item => !selectedItems.has(item.id));
            
            // Update UI
            selectedItems.clear();
            isSelectionMode = false;
            document.getElementById('download-list').classList.remove('selection-mode');
            selectionActions.classList.add('hidden');
            selectDownloadsButton.classList.remove('hidden');
            clearDownloadsButton.classList.remove('hidden');
            
            renderDownloads();
            renderLibrary();
            
            addNotification('Downloads Deleted', 'The selected downloads have been removed from your history', 'info');
        }
    }

    // Clear All Downloads
    function clearAllDownloads() {
        if (downloads.length === 0) {
            addNotification('No Downloads', 'There are no downloads to clear', 'info');
            return;
        }
        
        if (confirm('Are you sure you want to clear all downloads? This cannot be undone.')) {
            // Remove from database if logged in
            if (currentUser) {
                const downloadsRef = ref(database, `users/${currentUser.uid}/downloads`);
                remove(downloadsRef);
            }
            
            // Clear state
            downloads = [];
            
            // Update UI
            renderDownloads();
            renderLibrary();
            
            addNotification('Downloads Cleared', 'All downloads have been removed from your history', 'info');
        }
    }

    // Toggle Selection
    function toggleSelection(id) {
        if (selectedItems.has(id)) {
            selectedItems.delete(id);
        } else {
            selectedItems.add(id);
        }
        
        // Update UI
        const checkbox = document.querySelector(`.selection-checkbox[data-id="${id}"]`);
        if (checkbox) {
            if (selectedItems.has(id)) {
                checkbox.classList.add('checked');
            } else {
                checkbox.classList.remove('checked');
            }
        }
    }

    // Chat Functions
    function setupChatRealtime() {
        // Clear previous listeners if any
        const messagesRef = ref(database, 'chat/messages');
        
        // Listen for new messages (modified to fix the message delay)
        onChildAdded(query(messagesRef, orderByChild('timestamp')), (snapshot) => {
            const message = {
                id: snapshot.key,
                ...snapshot.val()
            };
            
            // Add message to state if it's not already there
            if (!messages.some(m => m.id === message.id)) {
                messages.push(message);
                messages.sort((a, b) => a.timestamp - b.timestamp);
                renderChatMessages();
                
                // Play sound if enabled
                if (chatSettings.sound && message.userId !== currentUser?.uid) {
                    playMessageSound();
                }
                
                // Show desktop notification if enabled
                if (chatSettings.desktopNotifications && message.userId !== currentUser?.uid) {
                    showDesktopNotification(message);
                }
            }
        });
        
        // Listen for message updates
        onChildChanged(messagesRef, (snapshot) => {
            const updatedMessage = {
                id: snapshot.key,
                ...snapshot.val()
            };
            
            // Update message in state
            const index = messages.findIndex(m => m.id === updatedMessage.id);
            if (index !== -1) {
                messages[index] = updatedMessage;
                renderChatMessages();
            }
        });
        
        // Listen for message deletions
        onChildRemoved(messagesRef, (snapshot) => {
            const deletedId = snapshot.key;
            
            // Remove message from state
            messages = messages.filter(m => m.id !== deletedId);
            renderChatMessages();
        });
        
        // Listen for typing indicators
        const typingRef = ref(database, 'typing');
        onValue(typingRef, (snapshot) => {
            const data = snapshot.val();
            typingUsers = data || {};
            
            // Show typing indicator if someone is typing
            updateTypingIndicator();
        });
    }

    function loadOnlineUsers() {
        const statusRef = ref(database, 'status');
        onValue(statusRef, (snapshot) => {
            const data = snapshot.val();
            onlineUsers = data || {};
            
            // Update online users count and list
            updateOnlineUsers();
        });
    }

    function updateTypingIndicator() {
        const typingUsersList = Object.entries(typingUsers)
            .filter(([uid]) => uid !== currentUser?.uid) // Don't show current user typing
            .map(([_, data]) => data.displayName);
        
        if (typingUsersList.length > 0) {
            typingIndicator.classList.remove('hidden');
            
            // Show who is typing
            const typingText = typingIndicator.querySelector('p');
            if (typingUsersList.length === 1) {
                typingText.textContent = `${typingUsersList[0]} is typing...`;
            } else if (typingUsersList.length === 2) {
                typingText.textContent = `${typingUsersList[0]} and ${typingUsersList[1]} are typing...`;
            } else {
                typingText.textContent = `${typingUsersList.length} people are typing...`;
            }
        } else {
            typingIndicator.classList.add('hidden');
        }
    }

    function updateOnlineUsers() {
        // Filter online users
        const online = Object.entries(onlineUsers)
            .filter(([_, data]) => data.online)
            .map(([uid, data]) => ({
                uid,
                displayName: data.displayName,
                photoURL: data.photoURL,
                isAdmin: data.isAdmin || uid === currentUser?.uid ? isAdmin : false
            }));
        
        // Update count
        onlineUsersCount.textContent = `${online.length} online`;
        
        // Update list
        usersList.innerHTML = '';
        
        if (online.length === 0) {
            usersList.innerHTML = `
                <div class="text-center py-4 text-gray-500">
                    <p>No users online</p>
                </div>
            `;
            return;
        }
        
        online.forEach(user => {
            const userItem = document.createElement('div');
            userItem.classList.add('user-item');
            
            userItem.innerHTML = `
                <div class="online-indicator"></div>
                <img src="${user.photoURL || `https://via.placeholder.com/32?text=${user.displayName[0]}`}" 
                    class="user-avatar" alt="${user.displayName}">
                <div>
                    <p class="${user.isAdmin ? 'text-red-500 font-bold' : 'font-medium'}">${user.displayName}</p>
                </div>
            `;
            
            usersList.appendChild(userItem);
        });
    }

    function renderChatMessages() {
        chatMessages.innerHTML = '';
        
        if (messages.length === 0) {
            chatMessages.innerHTML = `
                <div class="flex justify-center my-4">
                    <p class="text-gray-500 text-sm">No messages yet. Be the first to say hello!</p>
                </div>
            `;
            return;
        }
        
        // Filter messages based on current filter
        let filteredMessages = messages;
        if (currentFilter === 'media') {
            filteredMessages = messages.filter(message => message.mediaURL);
        } else if (currentFilter === 'links') {
            filteredMessages = messages.filter(message => /https?:\/\//.test(message.text));
        } else if (currentFilter === 'mentions') {
            filteredMessages = messages.filter(message => message.text && message.text.includes('@'));
        }
        
        if (filteredMessages.length === 0) {
            chatMessages.innerHTML = `
                <div class="flex justify-center my-4">
                    <p class="text-gray-500 text-sm">No ${currentFilter} messages found</p>
                </div>
            `;
            return;
        }
        
        filteredMessages.forEach(message => {
            const isCurrentUser = currentUser && message.userId === currentUser.uid;
            const isAdminUser = message.email === 'redi.shqipez@gmail.com';
            const isSystemMessage = message.isSystem;
            
            if (isSystemMessage) {
                // System message (like user blocked notifications)
                const systemElement = document.createElement('div');
                systemElement.classList.add('flex', 'justify-center', 'my-2');
                
                systemElement.innerHTML = `
                    <div class="bg-gray-100 text-gray-600 px-3 py-1 rounded-full text-sm">
                        ${message.text}
                    </div>
                `;
                
                chatMessages.appendChild(systemElement);
                return;
            }
            
            const messageElement = document.createElement('div');
            messageElement.classList.add('message');
            messageElement.dataset.id = message.id;
            
            if (isCurrentUser) {
                messageElement.classList.add('message-self');
            } else if (isAdminUser) {
                messageElement.classList.add('message-admin');
            } else {
                messageElement.classList.add('message-other');
            }
            
            // Add message display style class
            messageElement.classList.add(chatSettings.messageDisplay || 'bubbles');
            
            let mediaHTML = '';
            if (message.mediaURL) {
                const mediaType = message.mediaType;
                if (mediaType.startsWith('image/')) {
                    mediaHTML = `
                        <div class="message-media">
                            <img src="${message.mediaURL}" alt="Image" class="media-preview" data-type="image" data-url="${message.mediaURL}">
                        </div>
                    `;
                } else if (mediaType.startsWith('video/')) {
                    mediaHTML = `
                        <div class="message-media">
                            <video src="${message.mediaURL}" controls class="media-preview" data-type="video" data-url="${message.mediaURL}"></video>
                        </div>
                    `;
                } else if (mediaType.startsWith('audio/')) {
                    mediaHTML = `
                        <div class="message-media">
                            <audio src="${message.mediaURL}" controls></audio>
                        </div>
                    `;
                }
            }
            
            // Format links in text
            let formattedText = message.text || '';
            formattedText = formattedText.replace(/(https?:\/\/[^\s]+)/g, '<a href="$1" target="_blank" class="text-blue-500 hover:underline">$1</a>');
            
            // Format mentions
            formattedText = formattedText.replace(/@(\w+)/g, '<span class="text-blue-500">@$1</span>');
            
            messageElement.innerHTML = `
                ${!isCurrentUser ? `<div class="message-sender">${isAdminUser ? message.displayName || 'Admin' : message.displayName || 'User'}</div>` : ''}
                <div class="message-content">${formattedText}</div>
                ${mediaHTML}
                <div class="message-time">${formatTime(message.timestamp)}</div>
                <div class="message-options">
                    <button class="message-option-btn message-react-btn" title="React">
                        <i class="fas fa-smile"></i>
                    </button>
                    ${isCurrentUser || isAdmin ? `
                        <button class="message-option-btn message-delete-btn" title="Delete">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                    ` : ''}
                </div>
                <div class="message-reactions"></div>
            `;
            
            chatMessages.appendChild(messageElement);
            
            // Add reactions if any
            if (message.reactions) {
                const reactionsContainer = messageElement.querySelector('.message-reactions');
                Object.entries(message.reactions).forEach(([reaction, users]) => {
                    const reactionElement = document.createElement('div');
                    reactionElement.classList.add('reaction');
                    reactionElement.innerHTML = `
                        ${reaction} <span class="reaction-count">${Object.keys(users).length}</span>
                    `;
                    reactionsContainer.appendChild(reactionElement);
                    
                    // Add click handler to toggle reaction
                    reactionElement.addEventListener('click', () => {
                        toggleReaction(message.id, reaction);
                    });
                });
            }
            
            // Add event listeners for message options
            const reactButton = messageElement.querySelector('.message-react-btn');
            if (reactButton) {
                reactButton.addEventListener('click', () => {
                    if (!currentUser) {
                        showLoginPrompt();
                        return;
                    }
                    
                    if (isUserBlocked(currentUser.uid)) {
                        showBlockedMessage(blockedUsers[currentUser.uid]);
                        return;
                    }
                    
                    // Simple reaction menu (in a real app, you'd use a proper emoji picker)
                    const reactions = ['👍', '❤️', '😂', '😮', '😢', '👏'];
                    const randomReaction = reactions[Math.floor(Math.random() * reactions.length)];
                    toggleReaction(message.id, randomReaction);
                });
            }
            
            const deleteButton = messageElement.querySelector('.message-delete-btn');
            if (deleteButton) {
                deleteButton.addEventListener('click', () => {
                    deleteMessage(message.id);
                });
            }
        });
        
        // Scroll to bottom
        chatMessages.scrollTop = chatMessages.scrollHeight;
        
        // Add event listeners to media previews
        const mediaPreviews = document.querySelectorAll('.media-preview');
        mediaPreviews.forEach(preview => {
            preview.addEventListener('click', () => {
                const type = preview.dataset.type;
                const url = preview.dataset.url;
                
                if (type === 'image') {
                    mediaModalContent.innerHTML = `<img src="${url}" alt="Full size image">`;
                } else if (type === 'video') {
                    mediaModalContent.innerHTML = `<video src="${url}" controls autoplay></video>`;
                }
                
                mediaModal.classList.add('active');
            });
        });
    }

    function filterChatMessages() {
        renderChatMessages();
    }

    function sendChatMessage() {
        const text = chatInput.value.trim();
        
        if (!currentUser) {
            showLoginPrompt();
            return;
        }
        
        if (isUserBlocked(currentUser.uid)) {
            showBlockedMessage(blockedUsers[currentUser.uid]);
            return;
        }
        
        if (!text && mediaAttachments.length === 0) {
            return;
        }
        
        const message = {
            text: text,
            userId: currentUser.uid,
            displayName: currentUser.displayName || 'User',
            email: currentUser.email,
            photoURL: currentUser.photoURL || null,
            timestamp: Date.now()
        };
        
        if (mediaAttachments.length > 0) {
            const attachment = mediaAttachments[0]; // For simplicity, just use the first attachment
            
            // Show upload progress
            uploadProgress.style.display = 'block';
            uploadProgressBar.style.width = '0%';
            
            // Upload media to Firebase Storage
            const fileRef = storageRef(storage, `chat_media/${Date.now()}_${attachment.file.name}`);
            
            uploadTask = uploadBytesResumable(fileRef, attachment.file);
            
            uploadTask.on('state_changed', 
                (snapshot) => {
                    // Progress
                    const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                    uploadProgressBar.style.width = progress + '%';
                }, 
                (error) => {
                    // Error
                    uploadProgress.style.display = 'none';
                    addNotification('Upload Failed', 'There was an error uploading your media', 'error');
                    console.error(error);
                }, 
                () => {
                    // Complete
                    uploadProgress.style.display = 'none';
                    
                    getDownloadURL(uploadTask.snapshot.ref).then(url => {
                        message.mediaURL = url;
                        message.mediaType = attachment.file.type;
                        
                        // Save message to database
                        const newMessageRef = push(ref(database, 'chat/messages'));
                        set(newMessageRef, message);
                        
                        // Clear input and attachments
                        chatInput.value = '';
                        clearAttachments();
                        
                        // Clear typing status
                        if (currentUser) {
                            const typingRef = ref(database, `typing/${currentUser.uid}`);
                            remove(typingRef);
                        }
                    });
                }
            );
        } else {
            // Save text-only message to database
            const newMessageRef = push(ref(database, 'chat/messages'));
            set(newMessageRef, message);
            
            // Clear input
            chatInput.value = '';
            
            // Clear typing status
            if (currentUser) {
                const typingRef = ref(database, `typing/${currentUser.uid}`);
                remove(typingRef);
            }
        }
    }

    function handleMediaUpload(file) {
        if (!currentUser) {
            showLoginPrompt();
            return;
        }
        
        if (isUserBlocked(currentUser.uid)) {
            showBlockedMessage(blockedUsers[currentUser.uid]);
            return;
        }
        
        if (file.size > 10 * 1024 * 1024) {
            addNotification('File Too Large', 'Please select a file smaller than 10MB', 'error');
            return;
        }
        
        // Add to attachments
        mediaAttachments.push({
            id: Date.now().toString(),
            file: file
        });
        
        // Render preview
        renderAttachmentPreviews();
    }

       function renderAttachmentPreviews() {
        attachmentPreview.innerHTML = '';
        
        mediaAttachments.forEach(attachment => {
            const previewItem = document.createElement('div');
            previewItem.classList.add('attachment-item');
            
            const file = attachment.file;
            const fileType = file.type;
            
            if (fileType.startsWith('image/')) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    previewItem.innerHTML = `
                        <img src="${e.target.result}" alt="Image preview">
                        <div class="remove-attachment" data-id="${attachment.id}">
                            <i class="fas fa-times"></i>
                        </div>
                    `;
                };
                reader.readAsDataURL(file);
            } else if (fileType.startsWith('video/')) {
                previewItem.innerHTML = `
                    <div class="flex items-center justify-center h-full">
                        <i class="fas fa-video text-gray-500"></i>
                    </div>
                    <div class="remove-attachment" data-id="${attachment.id}">
                        <i class="fas fa-times"></i>
                    </div>
                `;
            } else if (fileType.startsWith('audio/')) {
                previewItem.innerHTML = `
                    <div class="flex items-center justify-center h-full">
                        <i class="fas fa-microphone text-gray-500"></i>
                    </div>
                    <div class="remove-attachment" data-id="${attachment.id}">
                        <i class="fas fa-times"></i>
                    </div>
                `;
            }
            
            attachmentPreview.appendChild(previewItem);
            
            // Add event listener to remove button
            const removeButton = previewItem.querySelector('.remove-attachment');
            if (removeButton) {
                removeButton.addEventListener('click', () => {
                    const id = removeButton.dataset.id;
                    mediaAttachments = mediaAttachments.filter(item => item.id !== id);
                    renderAttachmentPreviews();
                });
            }
        });
    }

    function clearAttachments() {
        mediaAttachments = [];
        attachmentPreview.innerHTML = '';
    }

    function toggleReaction(messageId, reaction) {
        if (!currentUser) {
            showLoginPrompt();
            return;
        }
        
        if (isUserBlocked(currentUser.uid)) {
            showBlockedMessage(blockedUsers[currentUser.uid]);
            return;
        }
        
        const messageRef = ref(database, `chat/messages/${messageId}/reactions/${reaction}/${currentUser.uid}`);
        
        // Check if user already reacted with this emoji
        get(messageRef).then((snapshot) => {
            if (snapshot.exists()) {
                // User already reacted, remove reaction
                remove(messageRef);
            } else {
                // Add reaction
                set(messageRef, true);
            }
        });
    }

    function deleteMessage(messageId) {
        if (confirm('Are you sure you want to delete this message?')) {
            const messageRef = ref(database, `chat/messages/${messageId}`);
            remove(messageRef);
        }
    }

    function showLoginPrompt() {
        addNotification('Login Required', 'Please log in to participate in the chat', 'info');
        loginPrompt.classList.remove('hidden');
    }

    function playMessageSound() {
        // Simple beep sound
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.type = 'sine';
        oscillator.frequency.value = 800;
        gainNode.gain.value = 0.1;
        
        oscillator.start();
        setTimeout(() => {
            oscillator.stop();
        }, 200);
    }

    function showDesktopNotification(message) {
        if (!("Notification" in window)) return;
        
        if (Notification.permission === "granted") {
            createNotification(message);
        } else if (Notification.permission !== "denied") {
            Notification.requestPermission().then(permission => {
                if (permission === "granted") {
                    createNotification(message);
                }
            });
        }
    }

    function createNotification(message) {
        const notification = new Notification("New Message", {
            body: `${message.displayName}: ${message.text || 'Sent a media file'}`,
            icon: message.photoURL || 'https://via.placeholder.com/64'
        });
        
        notification.onclick = function() {
            window.focus();
            document.getElementById('chat-option').click();
            notification.close();
        };
        
        setTimeout(() => {
            notification.close();
        }, 5000);
    }

    // Profile Functions
    function uploadProfilePhoto(file) {
        if (!currentUser) {
            addNotification('Not Logged In', 'Please log in to update your profile photo', 'error');
            return;
        }
        
        if (file.size > 5 * 1024 * 1024) {
            addNotification('File Too Large', 'Please select an image smaller than 5MB', 'error');
            return;
        }
        
        const fileRef = storageRef(storage, `profile_photos/${currentUser.uid}`);
        
        // Show upload progress
        const uploadTask = uploadBytesResumable(fileRef, file);
        
        uploadTask.on('state_changed', 
            (snapshot) => {
                // Progress
                const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                console.log('Upload is ' + progress + '% done');
            }, 
            (error) => {
                // Error
                addNotification('Upload Failed', 'There was an error uploading your photo', 'error');
                console.error(error);
            }, 
            () => {
                // Complete
                getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {
                    updateProfile(currentUser, {
                        photoURL: downloadURL
                    });
                    profileImageElement.src = downloadURL;
                    addNotification('Photo Updated', 'Your profile photo has been updated', 'success');
                });
            }
        );
    }

    function updateUserProfile() {
        if (!currentUser) {
            addNotification('Not Logged In', 'Please log in to update your profile', 'error');
            return;
        }
        
        const newDisplayName = displayNameInput.value.trim();
        const bio = bioInput.value.trim();
        const location = locationInput.value.trim();
        const website = websiteInput.value.trim();
        
        // Update Firebase Auth profile
        updateProfile(currentUser, {
            displayName: newDisplayName
        })
        .then(() => {
            // Update profile in database
            const userProfileRef = ref(database, `users/${currentUser.uid}/profile`);
            set(userProfileRef, {
                displayName: newDisplayName,
                bio: bio,
                location: location,
                website: website,
                socialAccounts: socialAccounts
            });
            
            // Update UI
            profileNameElement.textContent = newDisplayName;
            
            // Update status
            const userStatusRef = ref(database, `status/${currentUser.uid}`);
            update(userStatusRef, {
                displayName: newDisplayName
            });
            
            addNotification('Profile Updated', 'Your profile has been updated successfully', 'success');
            profileModal.classList.remove('active');
        })
        .catch((error) => {
            addNotification('Update Failed', 'There was an error updating your profile', 'error');
            console.error(error);
        });
    }

    function addSocialAccount() {
        const platform = socialPlatformSelect.value;
        const username = socialUsernameInput.value.trim();
        const link = socialLinkInput.value.trim();
        
        if (!platform || !username) {
            addNotification('Missing Information', 'Please select a platform and enter your username', 'error');
            return;
        }
        
        const socialAccount = {
            id: Date.now().toString(),
            platform: platform,
            username: username,
            link: link || ''
        };
        
        socialAccounts.push(socialAccount);
        renderSocialAccounts();
        
        // Clear inputs
        socialPlatformSelect.value = '';
        socialUsernameInput.value = '';
        socialLinkInput.value = '';
    }

    function renderSocialAccounts() {
        socialAccountsList.innerHTML = '';
        
        if (socialAccounts.length === 0) {
            socialAccountsList.innerHTML = `
                <p class="text-gray-500 text-center py-2">No social accounts added</p>
            `;
            return;
        }
        
        socialAccounts.forEach(account => {
            const accountElement = document.createElement('div');
            accountElement.classList.add('bg-gray-100', 'p-3', 'rounded-lg', 'flex', 'justify-between', 'items-center');
            
            let platformIcon = '';
            switch (account.platform) {
                case 'tiktok':
                    platformIcon = '<i class="fab fa-tiktok text-black"></i>';
                    break;
                case 'instagram':
                    platformIcon = '<i class="fab fa-instagram text-pink-500"></i>';
                    break;
                case 'facebook':
                    platformIcon = '<i class="fab fa-facebook text-blue-500"></i>';
                    break;
                case 'youtube':
                    platformIcon = '<i class="fab fa-youtube text-red-500"></i>';
                    break;
                case 'twitch':
                    platformIcon = '<i class="fab fa-twitch text-purple-500"></i>';
                    break;
                default:
                    platformIcon = '<i class="fas fa-link text-gray-500"></i>';
            }
            
            accountElement.innerHTML = `
                <div class="flex items-center">
                    <div class="mr-3 text-xl">${platformIcon}</div>
                    <div>
                        <p class="font-medium">${account.platform}</p>
                        <p class="text-sm text-gray-500">@${account.username}</p>
                    </div>
                </div>
                <button class="text-red-500 hover:text-red-600 remove-social" data-id="${account.id}">
                    <i class="fas fa-trash-alt"></i>
                </button>
            `;
            
            socialAccountsList.appendChild(accountElement);
            
            // Add event listener to remove button
            const removeButton = accountElement.querySelector('.remove-social');
            removeButton.addEventListener('click', () => {
                const id = removeButton.dataset.id;
                socialAccounts = socialAccounts.filter(item => item.id !== id);
                renderSocialAccounts();
            });
        });
    }

    function updateUserPassword(currentPassword, newPassword) {
        if (!currentUser) {
            showSecurityError('You must be logged in to change your password');
            return;
        }
        
        // Re-authenticate user
        const credential = EmailAuthProvider.credential(currentUser.email, currentPassword);
        
        reauthenticateWithCredential(currentUser, credential)
            .then(() => {
                // User re-authenticated, now update password
                return updatePassword(currentUser, newPassword);
            })
            .then(() => {
                // Password updated successfully
                addNotification('Password Updated', 'Your password has been updated successfully', 'success');
                securityModal.classList.remove('active');
                currentPasswordInput.value = '';
                newPasswordInput.value = '';
                confirmPasswordInput.value = '';
            })
            .catch((error) => {
                // Handle errors
                if (error.code === 'auth/wrong-password') {
                    showSecurityError('Current password is incorrect');
                } else {
                    showSecurityError('Failed to update password: ' + error.message);
                }
            });
    }

    function updatePasswordStrength(password) {
        let strength = 0;
        
        if (password.length >= 8) strength++;
        if (password.match(/[A-Z]/)) strength++;
        if (password.match(/[0-9]/)) strength++;
        if (password.match(/[^A-Za-z0-9]/)) strength++;
        
        // Update strength bars
        for (let i = 0; i < strengthBars.length; i++) {
            if (i < strength) {
                strengthBars[i].classList.remove('bg-gray-200');
                
                if (strength === 1) {
                    strengthBars[i].classList.add('bg-red-500');
                } else if (strength === 2) {
                    strengthBars[i].classList.add('bg-orange-500');
                } else if (strength === 3) {
                    strengthBars[i].classList.add('bg-yellow-500');
                } else {
                    strengthBars[i].classList.add('bg-green-500');
                }
            } else {
                strengthBars[i].className = 'h-2 w-1/4 bg-gray-200 rounded';
            }
        }
        
        // Update strength text
        if (password.length === 0) {
            strengthText.textContent = 'Enter a password';
            strengthText.className = 'text-xs text-gray-500 mt-1';
        } else if (strength === 1) {
            strengthText.textContent = 'Weak';
            strengthText.className = 'text-xs text-red-500 mt-1';
        } else if (strength === 2) {
            strengthText.textContent = 'Fair';
            strengthText.className = 'text-xs text-orange-500 mt-1';
        } else if (strength === 3) {
            strengthText.textContent = 'Good';
            strengthText.className = 'text-xs text-yellow-500 mt-1';
        } else {
            strengthText.textContent = 'Strong';
            strengthText.className = 'text-xs text-green-500 mt-1';
        }
    }

    // Settings Functions
    function saveUserSettings() {
        settings = {
            theme: themeSelect.value,
            language: languageSelect.value,
            downloadDirectory: downloadDirectoryInput.value,
            preferredFormat: formatSelect.value,
            defaultQuality: qualitySelect.value,
            notificationsEnabled: notificationsToggle.checked,
            emailNotificationsEnabled: emailNotificationsToggle.checked,
            autoConvert: autoConvertToggle.checked,
            autoDownload: autoDownloadToggle.checked,
            backgroundProcessing: backgroundProcessingToggle.checked,
            saveHistory: saveHistoryToggle.checked,
            analytics: analyticsToggle.checked
        };
        
        // Apply settings
        applySettings();
        
        // Save to database if logged in
        if (currentUser) {
            const userSettingsRef = ref(database, `users/${currentUser.uid}/settings`);
            set(userSettingsRef, settings);
        }
        
        addNotification('Settings Saved', 'Your settings have been saved successfully', 'success');
    }

    function saveChatSettingsToDatabase() {
        if (!currentUser) return;
        
        // Get selected theme
        const selectedTheme = document.querySelector('.chat-theme-option.border-4')?.dataset.theme || 'blue';
        
        chatSettings = {
            theme: selectedTheme,
            fontSize: chatFontSize.value,
            messageDisplay: chatMessageDisplay.value,
            sound: chatSoundToggle.checked,
            desktopNotifications: chatDesktopNotifToggle.checked,
            showTyping: chatTypingToggle.checked
        };
        
        // Apply settings
        applyChatSettings();
        
        // Save to database
        const chatSettingsRef = ref(database, `users/${currentUser.uid}/chatSettings`);
        set(chatSettingsRef, chatSettings);
        
        addNotification('Chat Settings Saved', 'Your chat settings have been saved', 'success');
    }

    function applySettings() {
        // Apply theme
        setTheme(settings.theme);
        
        // Update form values
        themeSelect.value = settings.theme;
        languageSelect.value = settings.language;
        downloadDirectoryInput.value = settings.downloadDirectory;
        formatSelect.value = settings.preferredFormat;
        qualitySelect.value = settings.defaultQuality;
        notificationsToggle.checked = settings.notificationsEnabled;
        emailNotificationsToggle.checked = settings.emailNotificationsEnabled;
        autoConvertToggle.checked = settings.autoConvert;
        autoDownloadToggle.checked = settings.autoDownload;
        backgroundProcessingToggle.checked = settings.backgroundProcessing;
        saveHistoryToggle.checked = settings.saveHistory;
        analyticsToggle.checked = settings.analytics;
    }

    function applyChatSettings() {
        // Apply chat theme
        document.querySelectorAll('.chat-theme-option').forEach(option => {
            option.classList.remove('border-4', 'border-white');
            if (option.dataset.theme === chatSettings.theme) {
                option.classList.add('border-4', 'border-white');
            }
        });
        
        // Apply font size
        chatFontSize.value = chatSettings.fontSize;
        document.getElementById('chat-messages').className = `chat-messages text-${chatSettings.fontSize}`;
        
        // Apply message display
        chatMessageDisplay.value = chatSettings.messageDisplay;
        
        // Apply notification settings
        chatSoundToggle.checked = chatSettings.sound;
        chatDesktopNotifToggle.checked = chatSettings.desktopNotifications;
        chatTypingToggle.checked = chatSettings.showTyping;
    }

    function setTheme(theme) {
        document.body.dataset.theme = theme;
        localStorage.setItem('theme', theme);
    }

    // Utility Functions
    function showAuthError(message) {
        authErrorElement.textContent = message;
        authErrorElement.classList.remove('hidden');
    }

    function showSecurityError(message) {
        securityErrorElement.textContent = message;
        securityErrorElement.classList.remove('hidden');
    }

    function clearAuthForm() {
        authEmailInput.value = '';
        authPasswordInput.value = '';
        authErrorElement.classList.add('hidden');
    }

    function getAuthErrorMessage(errorCode) {
        switch (errorCode) {
            case 'auth/user-not-found':
            case 'auth/wrong-password':
                return 'Invalid email or password';
            case 'auth/email-already-in-use':
                return 'Email is already in use';
            case 'auth/weak-password':
                return 'Password is too weak';
            case 'auth/invalid-email':
                return 'Invalid email address';
            default:
                return 'An error occurred. Please try again.';
        }
    }

    function showError(message) {
        errorMessage.textContent = message;
        errorMessage.classList.toggle('hidden', !message);
    }

    function addNotification(title, message, type = 'info') {
        const id = Date.now().toString();
        const notification = {
            id: id,
            title: title,
            message: message,
            type: type,
            timestamp: Date.now()
        };
        
        notifications.unshift(notification);
        if (notifications.length > 10) {
            notifications.pop();
        }
        
        renderNotifications();
        
        // Update badge
        notificationBadge.textContent = notifications.length;
        
        // Auto-hide after 5 seconds
        setTimeout(() => {
            const notificationElement = document.getElementById(`notification-${id}`);
            if (notificationElement) {
                notificationElement.style.opacity = '0';
                setTimeout(() => {
                    renderNotifications();
                }, 300);
            }
        }, 5000);
    }

    function renderNotifications() {
        const container = document.getElementById('notifications-container');
        container.innerHTML = '';
        
        if (notifications.length === 0) {
            container.innerHTML = `
                <div class="text-center py-4 text-gray-500">
                    <p>No notifications</p>
                </div>
            `;
            return;
        }
        
        notifications.forEach(notification => {
            const notificationElement = document.createElement('div');
            notificationElement.id = `notification-${notification.id}`;
            notificationElement.classList.add('p-3', 'rounded-lg', 'transition-opacity', 'duration-300');
            
            let bgColor = 'bg-gray-100';
            let iconClass = 'fas fa-info-circle text-blue-500';
            
            switch (notification.type) {
                case 'success':
                    bgColor = 'bg-green-100';
                    iconClass = 'fas fa-check-circle text-green-500';
                    break;
                case 'error':
                    bgColor = 'bg-red-100';
                    iconClass = 'fas fa-exclamation-circle text-red-500';
                    break;
                case 'warning':
                    bgColor = 'bg-yellow-100';
                    iconClass = 'fas fa-exclamation-triangle text-yellow-500';
                    break;
            }
            
            notificationElement.classList.add(bgColor);
            
            notificationElement.innerHTML = `
                <div class="flex items-start">
                    <div class="flex-shrink-0 mr-3">
                        <i class="${iconClass} text-lg"></i>
                    </div>
                    <div class="flex-grow">
                        <h4 class="font-medium text-gray-800">${notification.title}</h4>
                        <p class="text-sm text-gray-600">${notification.message}</p>
                        <p class="text-xs text-gray-500 mt-1">${formatTime(notification.timestamp)}</p>
                    </div>
                </div>
            `;
            
            container.appendChild(notificationElement);
        });
    }

    function formatDate(timestamp) {
        const date = new Date(timestamp);
        return date.toLocaleDateString();
    }

    function formatTime(timestamp) {
        const date = new Date(timestamp);
        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }

    function truncateText(text, maxLength) {
        if (text.length <= maxLength) return text;
        return text.substring(0, maxLength) + '...';
    }
</script>
</body>
</html>